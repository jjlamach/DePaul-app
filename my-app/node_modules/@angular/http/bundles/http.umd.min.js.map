{"version":3,"sources":["packages/http/http.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","http","core","tslib","rxjs","platformBrowser","this","tslib_1","RequestMethod","ReadyState","ResponseType","ContentType","ResponseContentType","BrowserXhr","prototype","build","XMLHttpRequest","decorators","type","Injectable","ctorParameters","Headers","headers","_this","_headers","Map","_normalizedNames","forEach","values","name","value","append","Object","keys","Array","isArray","delete","fromResponseHeaderString","headersString","split","line","index","indexOf","name_1","slice","trim","set","getAll","push","lcName","toLowerCase","fn","get","length","has","from","join","mayBeSetNormalizedName","toJSON","serialized","v","apply","__spread","entries","Error","ResponseOptions","opts","body","status","statusText","url","merge","options","BaseResponseOptions","_super","call","Default","__extends","ConnectionBackend","Connection","XSRFStrategy","normalizeMethodName","method","toUpperCase","Get","Post","Put","Delete","Options","Head","Patch","isSuccess","QueryEncoder","encodeKey","k","standardEncoding","encodeValue","encodeURIComponent","replace","URLSearchParams","rawParams","queryEncoder","paramsMap","paramParser","map","param","eqIdx","_a","__read","key","val","list","clone","appendAll","storedParam","setAll","searchParams","i","replaceAll","toString","paramsList","Body","json","_body","JSON","parse","ArrayBuffer","text","encodingHint","String","fromCharCode","Uint16Array","Uint8Array","stringify","arrayBuffer","stringToArrayBuffer","input","view","strLen","charCodeAt","buffer","blob","Blob","Response","responseOptions","ok","_nextRequestId","JSONP_HOME","_jsonpConnections","_getJsonpConnections","w","window","BrowserJsonp","node","document","createElement","src","nextRequestID","requestCallback","id","exposeConnection","connection","removeConnection","send","appendChild","cleanup","parentNode","removeChild","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONPConnection","req","_dom","baseResponseOptions","_finished","TypeError","request","response","Observable","responseObserver","readyState","Loading","_id","callback","lastIndexOf","substring","script","_script","onLoad","event","Cancelled","Done","responseOptions_1","error","_responseData","next","complete","onError","message","addEventListener","removeEventListener","finished","data","JSONPBackend","_browserJSONP","_baseResponseOptions","createConnection","XSSI_PREFIX","XHRConnection","browserXHR","_xhr","open","withCredentials","responseText","getAllResponseHeaders","getResponseURL","xhr","responseURL","test","getResponseHeader","err","setDetectedContentType","setRequestHeader","responseType","Json","Text","getBody","abort","contentType","NONE","FORM","TEXT","BLOB","CookieXSRFStrategy","_cookieName","_headerName","configureRequest","xsrfToken","ɵgetDOM","getCookie","XHRBackend","_browserXHR","_xsrfStrategy","RequestOptions","search","params","_mergeSearchParams","defineProperty","enumerable","configurable","_parseParams","objParams","item","_appendParam","BaseRequestOptions","Request","requestOptions","paramsArg","urlEncodeParams","element","prefix","detectContentType","FORM_DATA","ArrayBuffer$1","ARRAY_BUFFER","detectContentTypeFromBody","FormData","Blob$1","noop","httpRequest","backend","mergeOptions","defaultOpts","providedOpts","Http","_backend","_defaultOptions","responseObservable","post","put","patch","head","Jsonp","defaultOptions","_createDefaultCookieXSRFStrategy","httpFactory","xhrBackend","jsonpFactory","jsonpBackend","HttpModule","NgModule","args","providers","provide","useFactory","deps","useClass","JsonpModule","VERSION","Version","ɵangular_packages_http_http_e","ɵangular_packages_http_http_f","ɵangular_packages_http_http_a","ɵangular_packages_http_http_b","ɵangular_packages_http_http_c"],"mappings":"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","sourcesContent":["/**\n * @license Angular v6.0.0-rc.4\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('tslib'), require('rxjs'), require('@angular/platform-browser')) :\n\ttypeof define === 'function' && define.amd ? define('@angular/http', ['exports', '@angular/core', 'tslib', 'rxjs', '@angular/platform-browser'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.http = {}),global.ng.core,global.tslib,global.rxjs,global.ng.platformBrowser));\n}(this, (function (exports,core,tslib_1,rxjs,platformBrowser) { 'use strict';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @deprecated use @angular/common/http instead\n */\nvar BrowserXhr = /** @class */ (function () {\n    function BrowserXhr() {\n    }\n    BrowserXhr.prototype.build = function () { return (new XMLHttpRequest()); };\n    BrowserXhr.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    BrowserXhr.ctorParameters = function () { return []; };\n    return BrowserXhr;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Supported http methods.\n * @deprecated use @angular/common/http instead\n */\n/**\n * Supported http methods.\n * @deprecated use @angular/common/http instead\n */\n\n/**\n * Supported http methods.\n * @deprecated use @angular/common/http instead\n */\n(function (RequestMethod) {\n    RequestMethod[RequestMethod[\"Get\"] = 0] = \"Get\";\n    RequestMethod[RequestMethod[\"Post\"] = 1] = \"Post\";\n    RequestMethod[RequestMethod[\"Put\"] = 2] = \"Put\";\n    RequestMethod[RequestMethod[\"Delete\"] = 3] = \"Delete\";\n    RequestMethod[RequestMethod[\"Options\"] = 4] = \"Options\";\n    RequestMethod[RequestMethod[\"Head\"] = 5] = \"Head\";\n    RequestMethod[RequestMethod[\"Patch\"] = 6] = \"Patch\";\n})(exports.RequestMethod || (exports.RequestMethod = {}));\n/**\n * All possible states in which a connection can be, based on\n * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an\n * additional \"CANCELLED\" state.\n * @deprecated use @angular/common/http instead\n */\n/**\n * All possible states in which a connection can be, based on\n * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an\n * additional \"CANCELLED\" state.\n * @deprecated use @angular/common/http instead\n */\n\n/**\n * All possible states in which a connection can be, based on\n * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an\n * additional \"CANCELLED\" state.\n * @deprecated use @angular/common/http instead\n */\n(function (ReadyState) {\n    ReadyState[ReadyState[\"Unsent\"] = 0] = \"Unsent\";\n    ReadyState[ReadyState[\"Open\"] = 1] = \"Open\";\n    ReadyState[ReadyState[\"HeadersReceived\"] = 2] = \"HeadersReceived\";\n    ReadyState[ReadyState[\"Loading\"] = 3] = \"Loading\";\n    ReadyState[ReadyState[\"Done\"] = 4] = \"Done\";\n    ReadyState[ReadyState[\"Cancelled\"] = 5] = \"Cancelled\";\n})(exports.ReadyState || (exports.ReadyState = {}));\n/**\n * Acceptable response types to be associated with a {@link Response}, based on\n * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.\n * @deprecated use @angular/common/http instead\n */\n/**\n * Acceptable response types to be associated with a {@link Response}, based on\n * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.\n * @deprecated use @angular/common/http instead\n */\n\n/**\n * Acceptable response types to be associated with a {@link Response}, based on\n * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.\n * @deprecated use @angular/common/http instead\n */\n(function (ResponseType) {\n    ResponseType[ResponseType[\"Basic\"] = 0] = \"Basic\";\n    ResponseType[ResponseType[\"Cors\"] = 1] = \"Cors\";\n    ResponseType[ResponseType[\"Default\"] = 2] = \"Default\";\n    ResponseType[ResponseType[\"Error\"] = 3] = \"Error\";\n    ResponseType[ResponseType[\"Opaque\"] = 4] = \"Opaque\";\n})(exports.ResponseType || (exports.ResponseType = {}));\n/**\n * Supported content type to be automatically associated with a {@link Request}.\n * @deprecated use @angular/common/http instead\n */\n/**\n * Supported content type to be automatically associated with a {@link Request}.\n * @deprecated use @angular/common/http instead\n */\nvar ContentType;\n/**\n * Supported content type to be automatically associated with a {@link Request}.\n * @deprecated use @angular/common/http instead\n */\n(function (ContentType) {\n    ContentType[ContentType[\"NONE\"] = 0] = \"NONE\";\n    ContentType[ContentType[\"JSON\"] = 1] = \"JSON\";\n    ContentType[ContentType[\"FORM\"] = 2] = \"FORM\";\n    ContentType[ContentType[\"FORM_DATA\"] = 3] = \"FORM_DATA\";\n    ContentType[ContentType[\"TEXT\"] = 4] = \"TEXT\";\n    ContentType[ContentType[\"BLOB\"] = 5] = \"BLOB\";\n    ContentType[ContentType[\"ARRAY_BUFFER\"] = 6] = \"ARRAY_BUFFER\";\n})(ContentType || (ContentType = {}));\n/**\n * Define which buffer to use to store the response\n * @deprecated use @angular/common/http instead\n */\n/**\n * Define which buffer to use to store the response\n * @deprecated use @angular/common/http instead\n */\n\n/**\n * Define which buffer to use to store the response\n * @deprecated use @angular/common/http instead\n */\n(function (ResponseContentType) {\n    ResponseContentType[ResponseContentType[\"Text\"] = 0] = \"Text\";\n    ResponseContentType[ResponseContentType[\"Json\"] = 1] = \"Json\";\n    ResponseContentType[ResponseContentType[\"ArrayBuffer\"] = 2] = \"ArrayBuffer\";\n    ResponseContentType[ResponseContentType[\"Blob\"] = 3] = \"Blob\";\n})(exports.ResponseContentType || (exports.ResponseContentType = {}));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * ### Example\n *\n * ```\n * import {Headers} from '@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated use @angular/common/http instead\n */\nvar Headers = /** @class */ (function () {\n    // TODO(vicb): any -> string|string[]\n    function Headers(headers) {\n        var _this = this;\n        /** @internal header names are lower case */\n        this._headers = new Map();\n        /** @internal map lower case names to actual names */\n        this._normalizedNames = new Map();\n        if (!headers) {\n            return;\n        }\n        if (headers instanceof Headers) {\n            headers.forEach(function (values, name) {\n                values.forEach(function (value) { return _this.append(name, value); });\n            });\n            return;\n        }\n        Object.keys(headers).forEach(function (name) {\n            var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n            _this.delete(name);\n            values.forEach(function (value) { return _this.append(name, value); });\n        });\n    }\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     */\n    /**\n       * Returns a new Headers instance from the given DOMString of Response Headers\n       */\n    Headers.fromResponseHeaderString = /**\n       * Returns a new Headers instance from the given DOMString of Response Headers\n       */\n    function (headersString) {\n        var headers = new Headers();\n        headersString.split('\\n').forEach(function (line) {\n            var index = line.indexOf(':');\n            if (index > 0) {\n                var name_1 = line.slice(0, index);\n                var value = line.slice(index + 1).trim();\n                headers.set(name_1, value);\n            }\n        });\n        return headers;\n    };\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     */\n    /**\n       * Appends a header to existing list of header values for a given header name.\n       */\n    Headers.prototype.append = /**\n       * Appends a header to existing list of header values for a given header name.\n       */\n    function (name, value) {\n        var values = this.getAll(name);\n        if (values === null) {\n            this.set(name, value);\n        }\n        else {\n            values.push(value);\n        }\n    };\n    /**\n     * Deletes all header values for the given name.\n     */\n    /**\n       * Deletes all header values for the given name.\n       */\n    Headers.prototype.delete = /**\n       * Deletes all header values for the given name.\n       */\n    function (name) {\n        var lcName = name.toLowerCase();\n        this._normalizedNames.delete(lcName);\n        this._headers.delete(lcName);\n    };\n    Headers.prototype.forEach = function (fn) {\n        var _this = this;\n        this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });\n    };\n    /**\n     * Returns first header that matches given name.\n     */\n    /**\n       * Returns first header that matches given name.\n       */\n    Headers.prototype.get = /**\n       * Returns first header that matches given name.\n       */\n    function (name) {\n        var values = this.getAll(name);\n        if (values === null) {\n            return null;\n        }\n        return values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Checks for existence of header by given name.\n     */\n    /**\n       * Checks for existence of header by given name.\n       */\n    Headers.prototype.has = /**\n       * Checks for existence of header by given name.\n       */\n    function (name) { return this._headers.has(name.toLowerCase()); };\n    /**\n     * Returns the names of the headers\n     */\n    /**\n       * Returns the names of the headers\n       */\n    Headers.prototype.keys = /**\n       * Returns the names of the headers\n       */\n    function () { return Array.from(this._normalizedNames.values()); };\n    /**\n     * Sets or overrides header value for given name.\n     */\n    /**\n       * Sets or overrides header value for given name.\n       */\n    Headers.prototype.set = /**\n       * Sets or overrides header value for given name.\n       */\n    function (name, value) {\n        if (Array.isArray(value)) {\n            if (value.length) {\n                this._headers.set(name.toLowerCase(), [value.join(',')]);\n            }\n        }\n        else {\n            this._headers.set(name.toLowerCase(), [value]);\n        }\n        this.mayBeSetNormalizedName(name);\n    };\n    /**\n     * Returns values of all headers.\n     */\n    /**\n       * Returns values of all headers.\n       */\n    Headers.prototype.values = /**\n       * Returns values of all headers.\n       */\n    function () { return Array.from(this._headers.values()); };\n    /**\n     * Returns string of all headers.\n     */\n    // TODO(vicb): returns {[name: string]: string[]}\n    /**\n       * Returns string of all headers.\n       */\n    // TODO(vicb): returns {[name: string]: string[]}\n    Headers.prototype.toJSON = /**\n       * Returns string of all headers.\n       */\n    // TODO(vicb): returns {[name: string]: string[]}\n    function () {\n        var _this = this;\n        var serialized = {};\n        this._headers.forEach(function (values, name) {\n            var split = [];\n            values.forEach(function (v) { return split.push.apply(split, tslib_1.__spread(v.split(','))); });\n            serialized[_this._normalizedNames.get(name)] = split;\n        });\n        return serialized;\n    };\n    /**\n     * Returns list of header values for a given name.\n     */\n    /**\n       * Returns list of header values for a given name.\n       */\n    Headers.prototype.getAll = /**\n       * Returns list of header values for a given name.\n       */\n    function (name) {\n        return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n    };\n    /**\n     * This method is not implemented.\n     */\n    /**\n       * This method is not implemented.\n       */\n    Headers.prototype.entries = /**\n       * This method is not implemented.\n       */\n    function () { throw new Error('\"entries\" method is not implemented on Headers class'); };\n    Headers.prototype.mayBeSetNormalizedName = function (name) {\n        var lcName = name.toLowerCase();\n        if (!this._normalizedNames.has(lcName)) {\n            this._normalizedNames.set(lcName, name);\n        }\n    };\n    return Headers;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {@link Response Responses} for\n * mock responses (see {@link MockBackend}).\n *\n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n *\n * ```typescript\n * import {ResponseOptions, Response} from '@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @deprecated use @angular/common/http instead\n */\nvar ResponseOptions = /** @class */ (function () {\n    function ResponseOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var body = opts.body, status = opts.status, headers = opts.headers, statusText = opts.statusText, type = opts.type, url = opts.url;\n        this.body = body != null ? body : null;\n        this.status = status != null ? status : null;\n        this.headers = headers != null ? headers : null;\n        this.statusText = statusText != null ? statusText : null;\n        this.type = type != null ? type : null;\n        this.url = url != null ? url : null;\n    }\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     */\n    /**\n       * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n       * override\n       * existing values. This method will not change the values of the instance on which it is being\n       * called.\n       *\n       * This may be useful when sharing a base `ResponseOptions` object inside tests,\n       * where certain properties may change from test to test.\n       *\n       * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n       *\n       * ```typescript\n       * import {ResponseOptions, Response} from '@angular/http';\n       *\n       * var options = new ResponseOptions({\n       *   body: {name: 'Jeff'}\n       * });\n       * var res = new Response(options.merge({\n       *   url: 'https://google.com'\n       * }));\n       * console.log('options.url:', options.url); // null\n       * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n       * console.log('res.url:', res.url); // https://google.com\n       * ```\n       */\n    ResponseOptions.prototype.merge = /**\n       * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n       * override\n       * existing values. This method will not change the values of the instance on which it is being\n       * called.\n       *\n       * This may be useful when sharing a base `ResponseOptions` object inside tests,\n       * where certain properties may change from test to test.\n       *\n       * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n       *\n       * ```typescript\n       * import {ResponseOptions, Response} from '@angular/http';\n       *\n       * var options = new ResponseOptions({\n       *   body: {name: 'Jeff'}\n       * });\n       * var res = new Response(options.merge({\n       *   url: 'https://google.com'\n       * }));\n       * console.log('options.url:', options.url); // null\n       * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n       * console.log('res.url:', res.url); // https://google.com\n       * ```\n       */\n    function (options) {\n        return new ResponseOptions({\n            body: options && options.body != null ? options.body : this.body,\n            status: options && options.status != null ? options.status : this.status,\n            headers: options && options.headers != null ? options.headers : this.headers,\n            statusText: options && options.statusText != null ? options.statusText : this.statusText,\n            type: options && options.type != null ? options.type : this.type,\n            url: options && options.url != null ? options.url : this.url,\n        });\n    };\n    return ResponseOptions;\n}());\n/**\n * Subclass of {@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {@link Headers} object\n *\n * This class could be extended and bound to the {@link ResponseOptions} class\n * when configuring an {@link Injector}, in order to override the default options\n * used by {@link Http} to create {@link Response Responses}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n *\n * ```typescript\n * import {provide} from '@angular/core';\n * import {bootstrap} from '@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {@link Response}\n * object.\n *\n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n *\n * ```\n * import {BaseResponseOptions, Response} from '@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @deprecated use @angular/common/http instead\n */\nvar BaseResponseOptions = /** @class */ (function (_super) {\n    tslib_1.__extends(BaseResponseOptions, _super);\n    function BaseResponseOptions() {\n        return _super.call(this, { status: 200, statusText: 'Ok', type: exports.ResponseType.Default, headers: new Headers() }) || this;\n    }\n    BaseResponseOptions.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    BaseResponseOptions.ctorParameters = function () { return []; };\n    return BaseResponseOptions;\n}(ResponseOptions));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {@link Request}.\n *\n * @deprecated use @angular/common/http instead\n */\nvar ConnectionBackend = /** @class */ (function () {\n    function ConnectionBackend() {\n    }\n    return ConnectionBackend;\n}());\n/**\n * Abstract class from which real connections are derived.\n *\n * @deprecated use @angular/common/http instead\n */\nvar Connection = /** @class */ (function () {\n    function Connection() {\n    }\n    return Connection;\n}());\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @deprecated use @angular/common/http instead\n */\nvar XSRFStrategy = /** @class */ (function () {\n    function XSRFStrategy() {\n    }\n    return XSRFStrategy;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction normalizeMethodName(method) {\n    if (typeof method !== 'string')\n        return method;\n    switch (method.toUpperCase()) {\n        case 'GET':\n            return exports.RequestMethod.Get;\n        case 'POST':\n            return exports.RequestMethod.Post;\n        case 'PUT':\n            return exports.RequestMethod.Put;\n        case 'DELETE':\n            return exports.RequestMethod.Delete;\n        case 'OPTIONS':\n            return exports.RequestMethod.Options;\n        case 'HEAD':\n            return exports.RequestMethod.Head;\n        case 'PATCH':\n            return exports.RequestMethod.Patch;\n    }\n    throw new Error(\"Invalid request method. The method \\\"\" + method + \"\\\" is not supported.\");\n}\nvar isSuccess = function (status) { return (status >= 200 && status < 300); };\nfunction getResponseURL(xhr) {\n    if ('responseURL' in xhr) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n\nfunction stringToArrayBuffer(input) {\n    var view = new Uint16Array(input.length);\n    for (var i = 0, strLen = input.length; i < strLen; i++) {\n        view[i] = input.charCodeAt(i);\n    }\n    return view.buffer;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction paramParser(rawParams) {\n    if (rawParams === void 0) { rawParams = ''; }\n    var map = new Map();\n    if (rawParams.length > 0) {\n        var params = rawParams.split('&');\n        params.forEach(function (param) {\n            var eqIdx = param.indexOf('=');\n            var _a = tslib_1.__read(eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], 2), key = _a[0], val = _a[1];\n            var list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * @deprecated use @angular/common/http instead\n **/\nvar QueryEncoder = /** @class */ (function () {\n    function QueryEncoder() {\n    }\n    QueryEncoder.prototype.encodeKey = function (k) { return standardEncoding(k); };\n    QueryEncoder.prototype.encodeValue = function (v) { return standardEncoding(v); };\n    return QueryEncoder;\n}());\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated use @angular/common/http instead\n */\nvar URLSearchParams = /** @class */ (function () {\n    function URLSearchParams(rawParams, queryEncoder) {\n        if (rawParams === void 0) { rawParams = ''; }\n        if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }\n        this.rawParams = rawParams;\n        this.queryEncoder = queryEncoder;\n        this.paramsMap = paramParser(rawParams);\n    }\n    URLSearchParams.prototype.clone = function () {\n        var clone = new URLSearchParams('', this.queryEncoder);\n        clone.appendAll(this);\n        return clone;\n    };\n    URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };\n    URLSearchParams.prototype.get = function (param) {\n        var storedParam = this.paramsMap.get(param);\n        return Array.isArray(storedParam) ? storedParam[0] : null;\n    };\n    URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || []; };\n    URLSearchParams.prototype.set = function (param, val) {\n        if (val === void 0 || val === null) {\n            this.delete(param);\n            return;\n        }\n        var list = this.paramsMap.get(param) || [];\n        list.length = 0;\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    URLSearchParams.prototype.setAll = \n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            list.push(value[0]);\n            _this.paramsMap.set(param, list);\n        });\n    };\n    URLSearchParams.prototype.append = function (param, val) {\n        if (val === void 0 || val === null)\n            return;\n        var list = this.paramsMap.get(param) || [];\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `append(name, value)`\n    // for each value in `values`.\n    //\n    // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `append(name, value)`\n    // for each value in `values`.\n    //\n    // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    URLSearchParams.prototype.appendAll = \n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `append(name, value)`\n    // for each value in `values`.\n    //\n    // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var list = _this.paramsMap.get(param) || [];\n            for (var i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `delete(name)`,\n    // followed by `set(name, values)`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `delete(name)`,\n    // followed by `set(name, values)`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    URLSearchParams.prototype.replaceAll = \n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `delete(name)`,\n    // followed by `set(name, values)`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            for (var i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    URLSearchParams.prototype.toString = function () {\n        var _this = this;\n        var paramsList = [];\n        this.paramsMap.forEach(function (values, k) {\n            values.forEach(function (v) {\n                return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v));\n            });\n        });\n        return paramsList.join('&');\n    };\n    URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };\n    return URLSearchParams;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * HTTP request body used by both {@link Request} and {@link Response}\n * https://fetch.spec.whatwg.org/#body\n */\nvar Body = /** @class */ (function () {\n    function Body() {\n    }\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     */\n    /**\n       * Attempts to return body as parsed `JSON` object, or raises an exception.\n       */\n    Body.prototype.json = /**\n       * Attempts to return body as parsed `JSON` object, or raises an exception.\n       */\n    function () {\n        if (typeof this._body === 'string') {\n            return JSON.parse(this._body);\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return JSON.parse(this.text());\n        }\n        return this._body;\n    };\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     */\n    /**\n       * Returns the body as a string, presuming `toString()` can be called on the response body.\n       *\n       * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n       * bytes in the buffer will be interpreted. Valid values are:\n       *\n       * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n       *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n       *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n       *   into consideration. This is the default behavior to avoid breaking apps, but should be\n       *   considered deprecated.\n       *\n       * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n       */\n    Body.prototype.text = /**\n       * Returns the body as a string, presuming `toString()` can be called on the response body.\n       *\n       * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n       * bytes in the buffer will be interpreted. Valid values are:\n       *\n       * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n       *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n       *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n       *   into consideration. This is the default behavior to avoid breaking apps, but should be\n       *   considered deprecated.\n       *\n       * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n       */\n    function (encodingHint) {\n        if (encodingHint === void 0) { encodingHint = 'legacy'; }\n        if (this._body instanceof URLSearchParams) {\n            return this._body.toString();\n        }\n        if (this._body instanceof ArrayBuffer) {\n            switch (encodingHint) {\n                case 'legacy':\n                    return String.fromCharCode.apply(null, new Uint16Array(this._body));\n                case 'iso-8859':\n                    return String.fromCharCode.apply(null, new Uint8Array(this._body));\n                default:\n                    throw new Error(\"Invalid value for encodingHint: \" + encodingHint);\n            }\n        }\n        if (this._body == null) {\n            return '';\n        }\n        if (typeof this._body === 'object') {\n            return JSON.stringify(this._body, null, 2);\n        }\n        return this._body.toString();\n    };\n    /**\n     * Return the body as an ArrayBuffer\n     */\n    /**\n       * Return the body as an ArrayBuffer\n       */\n    Body.prototype.arrayBuffer = /**\n       * Return the body as an ArrayBuffer\n       */\n    function () {\n        if (this._body instanceof ArrayBuffer) {\n            return this._body;\n        }\n        return stringToArrayBuffer(this.text());\n    };\n    /**\n      * Returns the request's body as a Blob, assuming that body exists.\n      */\n    /**\n        * Returns the request's body as a Blob, assuming that body exists.\n        */\n    Body.prototype.blob = /**\n        * Returns the request's body as a Blob, assuming that body exists.\n        */\n    function () {\n        if (this._body instanceof Blob) {\n            return this._body;\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return new Blob([this._body]);\n        }\n        throw new Error('The request body isn\\'t either a blob or an array buffer');\n    };\n    return Body;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @deprecated use @angular/common/http instead\n */\nvar Response = /** @class */ (function (_super) {\n    tslib_1.__extends(Response, _super);\n    function Response(responseOptions) {\n        var _this = _super.call(this) || this;\n        _this._body = responseOptions.body;\n        _this.status = (responseOptions.status);\n        _this.ok = (_this.status >= 200 && _this.status <= 299);\n        _this.statusText = responseOptions.statusText;\n        _this.headers = responseOptions.headers;\n        _this.type = (responseOptions.type);\n        _this.url = (responseOptions.url);\n        return _this;\n    }\n    Response.prototype.toString = function () {\n        return \"Response with status: \" + this.status + \" \" + this.statusText + \" for URL: \" + this.url;\n    };\n    return Response;\n}(Body));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _nextRequestId = 0;\nvar JSONP_HOME = '__ng_jsonp__';\nvar _jsonpConnections = null;\nfunction _getJsonpConnections() {\n    var w = typeof window == 'object' ? window : {};\n    if (_jsonpConnections === null) {\n        _jsonpConnections = w[JSONP_HOME] = {};\n    }\n    return _jsonpConnections;\n}\n// Make sure not to evaluate this in a non-browser environment!\nvar BrowserJsonp = /** @class */ (function () {\n    function BrowserJsonp() {\n    }\n    // Construct a <script> element with the specified URL\n    // Construct a <script> element with the specified URL\n    BrowserJsonp.prototype.build = \n    // Construct a <script> element with the specified URL\n    function (url) {\n        var node = document.createElement('script');\n        node.src = url;\n        return node;\n    };\n    BrowserJsonp.prototype.nextRequestID = function () { return \"__req\" + _nextRequestId++; };\n    BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + \".\" + id + \".finished\"; };\n    BrowserJsonp.prototype.exposeConnection = function (id, connection) {\n        var connections = _getJsonpConnections();\n        connections[id] = connection;\n    };\n    BrowserJsonp.prototype.removeConnection = function (id) {\n        var connections = _getJsonpConnections();\n        connections[id] = null;\n    };\n    // Attach the <script> element to the DOM\n    // Attach the <script> element to the DOM\n    BrowserJsonp.prototype.send = \n    // Attach the <script> element to the DOM\n    function (node) { document.body.appendChild((node)); };\n    // Remove <script> element from the DOM\n    // Remove <script> element from the DOM\n    BrowserJsonp.prototype.cleanup = \n    // Remove <script> element from the DOM\n    function (node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild((node));\n        }\n    };\n    BrowserJsonp.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    BrowserJsonp.ctorParameters = function () { return []; };\n    return BrowserJsonp;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Base class for an in-flight JSONP request.\n *\n * @deprecated use @angular/common/http instead\n */\nvar JSONPConnection = /** @class */ (function () {\n    /** @internal */\n    function JSONPConnection(req, _dom, baseResponseOptions) {\n        var _this = this;\n        this._dom = _dom;\n        this.baseResponseOptions = baseResponseOptions;\n        this._finished = false;\n        if (req.method !== exports.RequestMethod.Get) {\n            throw new TypeError(JSONP_ERR_WRONG_METHOD);\n        }\n        this.request = req;\n        this.response = new rxjs.Observable(function (responseObserver) {\n            _this.readyState = exports.ReadyState.Loading;\n            var id = _this._id = _dom.nextRequestID();\n            _dom.exposeConnection(id, _this);\n            // Workaround Dart\n            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n            var callback = _dom.requestCallback(_this._id);\n            var url = req.url;\n            if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n                url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");\n            }\n            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);\n            }\n            var script = _this._script = _dom.build(url);\n            var onLoad = function (event) {\n                if (_this.readyState === exports.ReadyState.Cancelled)\n                    return;\n                _this.readyState = exports.ReadyState.Done;\n                _dom.cleanup(script);\n                if (!_this._finished) {\n                    var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: exports.ResponseType.Error, url: url });\n                    if (baseResponseOptions) {\n                        responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\n                    }\n                    responseObserver.error(new Response(responseOptions_1));\n                    return;\n                }\n                var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });\n                if (_this.baseResponseOptions) {\n                    responseOptions = _this.baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.next(new Response(responseOptions));\n                responseObserver.complete();\n            };\n            var onError = function (error) {\n                if (_this.readyState === exports.ReadyState.Cancelled)\n                    return;\n                _this.readyState = exports.ReadyState.Done;\n                _dom.cleanup(script);\n                var responseOptions = new ResponseOptions({ body: error.message, type: exports.ResponseType.Error });\n                if (baseResponseOptions) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            script.addEventListener('load', onLoad);\n            script.addEventListener('error', onError);\n            _dom.send(script);\n            return function () {\n                _this.readyState = exports.ReadyState.Cancelled;\n                script.removeEventListener('load', onLoad);\n                script.removeEventListener('error', onError);\n                _this._dom.cleanup(script);\n            };\n        });\n    }\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     */\n    /**\n       * Callback called when the JSONP request completes, to notify the application\n       * of the new data.\n       */\n    JSONPConnection.prototype.finished = /**\n       * Callback called when the JSONP request completes, to notify the application\n       * of the new data.\n       */\n    function (data) {\n        // Don't leak connections\n        this._finished = true;\n        this._dom.removeConnection(this._id);\n        if (this.readyState === exports.ReadyState.Cancelled)\n            return;\n        this._responseData = data;\n    };\n    return JSONPConnection;\n}());\n/**\n * A {@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @deprecated use @angular/common/http instead\n */\nvar JSONPBackend = /** @class */ (function (_super) {\n    tslib_1.__extends(JSONPBackend, _super);\n    /** @internal */\n    function JSONPBackend(_browserJSONP, _baseResponseOptions) {\n        var _this = _super.call(this) || this;\n        _this._browserJSONP = _browserJSONP;\n        _this._baseResponseOptions = _baseResponseOptions;\n        return _this;\n    }\n    JSONPBackend.prototype.createConnection = function (request) {\n        return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\n    };\n    JSONPBackend.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    JSONPBackend.ctorParameters = function () { return [\n        { type: BrowserJsonp, },\n        { type: ResponseOptions, },\n    ]; };\n    return JSONPBackend;\n}(ConnectionBackend));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {@link MockConnection} may be interacted with in tests.\n *\n * @deprecated use @angular/common/http instead\n */\nvar XHRConnection = /** @class */ (function () {\n    function XHRConnection(req, browserXHR, baseResponseOptions) {\n        var _this = this;\n        this.request = req;\n        this.response = new rxjs.Observable(function (responseObserver) {\n            var _xhr = browserXHR.build();\n            _xhr.open(exports.RequestMethod[req.method].toUpperCase(), req.url);\n            if (req.withCredentials != null) {\n                _xhr.withCredentials = req.withCredentials;\n            }\n            // load event handler\n            var onLoad = function () {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var status = _xhr.status === 1223 ? 204 : _xhr.status;\n                var body = null;\n                // HTTP 204 means no content\n                if (status !== 204) {\n                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                    // response/responseType properties were introduced in ResourceLoader Level2 spec\n                    // (supported by IE10)\n                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n                    // Implicitly strip a potential XSSI prefix.\n                    if (typeof body === 'string') {\n                        body = body.replace(XSSI_PREFIX, '');\n                    }\n                }\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status === 0) {\n                    status = body ? 200 : 0;\n                }\n                var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                // IE 9 does not provide the way to get URL of response\n                var url = getResponseURL(_xhr) || req.url;\n                var statusText = _xhr.statusText || 'OK';\n                var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                var response = new Response(responseOptions);\n                response.ok = isSuccess(status);\n                if (response.ok) {\n                    responseObserver.next(response);\n                    // TODO(gdi2290): defer complete if array buffer until done\n                    responseObserver.complete();\n                    return;\n                }\n                responseObserver.error(response);\n            };\n            // error event handler\n            var onError = function (err) {\n                var responseOptions = new ResponseOptions({\n                    body: err,\n                    type: exports.ResponseType.Error,\n                    status: _xhr.status,\n                    statusText: _xhr.statusText,\n                });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            _this.setDetectedContentType(req, _xhr);\n            if (req.headers == null) {\n                req.headers = new Headers();\n            }\n            if (!req.headers.has('Accept')) {\n                req.headers.append('Accept', 'application/json, text/plain, */*');\n            }\n            req.headers.forEach(function (values, name) { return _xhr.setRequestHeader((name), values.join(',')); });\n            // Select the correct buffer type to store the response\n            if (req.responseType != null && _xhr.responseType != null) {\n                switch (req.responseType) {\n                    case exports.ResponseContentType.ArrayBuffer:\n                        _xhr.responseType = 'arraybuffer';\n                        break;\n                    case exports.ResponseContentType.Json:\n                        _xhr.responseType = 'json';\n                        break;\n                    case exports.ResponseContentType.Text:\n                        _xhr.responseType = 'text';\n                        break;\n                    case exports.ResponseContentType.Blob:\n                        _xhr.responseType = 'blob';\n                        break;\n                    default:\n                        throw new Error('The selected responseType is not supported');\n                }\n            }\n            _xhr.addEventListener('load', onLoad);\n            _xhr.addEventListener('error', onError);\n            _xhr.send(_this.request.getBody());\n            return function () {\n                _xhr.removeEventListener('load', onLoad);\n                _xhr.removeEventListener('error', onError);\n                _xhr.abort();\n            };\n        });\n    }\n    XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n        // Skip if a custom Content-Type header is provided\n        if (req.headers != null && req.headers.get('Content-Type') != null) {\n            return;\n        }\n        // Set the detected content type\n        switch (req.contentType) {\n            case ContentType.NONE:\n                break;\n            case ContentType.JSON:\n                _xhr.setRequestHeader('content-type', 'application/json');\n                break;\n            case ContentType.FORM:\n                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                break;\n            case ContentType.TEXT:\n                _xhr.setRequestHeader('content-type', 'text/plain');\n                break;\n            case ContentType.BLOB:\n                var blob = req.blob();\n                if (blob.type) {\n                    _xhr.setRequestHeader('content-type', blob.type);\n                }\n                break;\n        }\n    };\n    return XHRConnection;\n}());\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated use @angular/common/http instead\n */\nvar CookieXSRFStrategy = /** @class */ (function () {\n    function CookieXSRFStrategy(_cookieName, _headerName) {\n        if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\n        if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\n        this._cookieName = _cookieName;\n        this._headerName = _headerName;\n    }\n    CookieXSRFStrategy.prototype.configureRequest = function (req) {\n        var xsrfToken = platformBrowser.ɵgetDOM().getCookie(this._cookieName);\n        if (xsrfToken) {\n            req.headers.set(this._headerName, xsrfToken);\n        }\n    };\n    return CookieXSRFStrategy;\n}());\n/**\n * Creates {@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '@angular/http';\n * @Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated use @angular/common/http instead\n */\nvar XHRBackend = /** @class */ (function () {\n    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n        this._browserXHR = _browserXHR;\n        this._baseResponseOptions = _baseResponseOptions;\n        this._xsrfStrategy = _xsrfStrategy;\n    }\n    XHRBackend.prototype.createConnection = function (request) {\n        this._xsrfStrategy.configureRequest(request);\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n    };\n    XHRBackend.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    XHRBackend.ctorParameters = function () { return [\n        { type: BrowserXhr, },\n        { type: ResponseOptions, },\n        { type: XSRFStrategy, },\n    ]; };\n    return XHRBackend;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated use @angular/common/http instead\n */\nvar RequestOptions = /** @class */ (function () {\n    // TODO(Dzmitry): remove search when this.search is removed\n    function RequestOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var method = opts.method, headers = opts.headers, body = opts.body, url = opts.url, search = opts.search, params = opts.params, withCredentials = opts.withCredentials, responseType = opts.responseType;\n        this.method = method != null ? normalizeMethodName(method) : null;\n        this.headers = headers != null ? headers : null;\n        this.body = body != null ? body : null;\n        this.url = url != null ? url : null;\n        this.params = this._mergeSearchParams(params || search);\n        this.withCredentials = withCredentials != null ? withCredentials : null;\n        this.responseType = responseType != null ? responseType : null;\n    }\n    Object.defineProperty(RequestOptions.prototype, \"search\", {\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         */\n        get: /**\n           * @deprecated from 4.0.0. Use params instead.\n           */\n        function () { return this.params; },\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         */\n        set: /**\n           * @deprecated from 4.0.0. Use params instead.\n           */\n        function (params) { this.params = params; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     */\n    /**\n       * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n       * existing values. This method will not change the values of the instance on which it is being\n       * called.\n       *\n       * Note that `headers` and `search` will override existing values completely if present in\n       * the `options` object. If these values should be merged, it should be done prior to calling\n       * `merge` on the `RequestOptions` instance.\n       *\n       * ```typescript\n       * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n       *\n       * const options = new RequestOptions({\n       *   method: RequestMethod.Post\n       * });\n       * const req = new Request(options.merge({\n       *   url: 'https://google.com'\n       * }));\n       * console.log('req.method:', RequestMethod[req.method]); // Post\n       * console.log('options.url:', options.url); // null\n       * console.log('req.url:', req.url); // https://google.com\n       * ```\n       */\n    RequestOptions.prototype.merge = /**\n       * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n       * existing values. This method will not change the values of the instance on which it is being\n       * called.\n       *\n       * Note that `headers` and `search` will override existing values completely if present in\n       * the `options` object. If these values should be merged, it should be done prior to calling\n       * `merge` on the `RequestOptions` instance.\n       *\n       * ```typescript\n       * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n       *\n       * const options = new RequestOptions({\n       *   method: RequestMethod.Post\n       * });\n       * const req = new Request(options.merge({\n       *   url: 'https://google.com'\n       * }));\n       * console.log('req.method:', RequestMethod[req.method]); // Post\n       * console.log('options.url:', options.url); // null\n       * console.log('req.url:', req.url); // https://google.com\n       * ```\n       */\n    function (options) {\n        return new RequestOptions({\n            method: options && options.method != null ? options.method : this.method,\n            headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n            body: options && options.body != null ? options.body : this.body,\n            url: options && options.url != null ? options.url : this.url,\n            params: options && this._mergeSearchParams(options.params || options.search),\n            withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                this.withCredentials,\n            responseType: options && options.responseType != null ? options.responseType :\n                this.responseType\n        });\n    };\n    RequestOptions.prototype._mergeSearchParams = function (params) {\n        if (!params)\n            return this.params;\n        if (params instanceof URLSearchParams) {\n            return params.clone();\n        }\n        if (typeof params === 'string') {\n            return new URLSearchParams(params);\n        }\n        return this._parseParams(params);\n    };\n    RequestOptions.prototype._parseParams = function (objParams) {\n        var _this = this;\n        if (objParams === void 0) { objParams = {}; }\n        var params = new URLSearchParams();\n        Object.keys(objParams).forEach(function (key) {\n            var value = objParams[key];\n            if (Array.isArray(value)) {\n                value.forEach(function (item) { return _this._appendParam(key, item, params); });\n            }\n            else {\n                _this._appendParam(key, value, params);\n            }\n        });\n        return params;\n    };\n    RequestOptions.prototype._appendParam = function (key, value, params) {\n        if (typeof value !== 'string') {\n            value = JSON.stringify(value);\n        }\n        params.append(key, value);\n    };\n    return RequestOptions;\n}());\n/**\n * Subclass of {@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {@link RequestMethod RequestMethod.Get}\n *  * headers: empty {@link Headers} object\n *\n * This class could be extended and bound to the {@link RequestOptions} class\n * when configuring an {@link Injector}, in order to override the default options\n * used by {@link Http} to create and send {@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated use @angular/common/http instead\n */\nvar BaseRequestOptions = /** @class */ (function (_super) {\n    tslib_1.__extends(BaseRequestOptions, _super);\n    function BaseRequestOptions() {\n        return _super.call(this, { method: exports.RequestMethod.Get, headers: new Headers() }) || this;\n    }\n    BaseRequestOptions.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    BaseRequestOptions.ctorParameters = function () { return []; };\n    return BaseRequestOptions;\n}(RequestOptions));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jeffbcross): properly implement body accessors\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {@link Http} and\n * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '@angular/http';\n *\n * @Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated use @angular/common/http instead\n */\nvar Request = /** @class */ (function (_super) {\n    tslib_1.__extends(Request, _super);\n    function Request(requestOptions) {\n        var _this = _super.call(this) || this;\n        // TODO: assert that url is present\n        var url = requestOptions.url;\n        _this.url = (requestOptions.url);\n        var paramsArg = requestOptions.params || requestOptions.search;\n        if (paramsArg) {\n            var params = void 0;\n            if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n                params = urlEncodeParams(paramsArg).toString();\n            }\n            else {\n                params = paramsArg.toString();\n            }\n            if (params.length > 0) {\n                var prefix = '?';\n                if (_this.url.indexOf('?') != -1) {\n                    prefix = (_this.url[_this.url.length - 1] == '&') ? '' : '&';\n                }\n                // TODO: just delete search-query-looking string in url?\n                // TODO: just delete search-query-looking string in url?\n                _this.url = url + prefix + params;\n            }\n        }\n        _this._body = requestOptions.body;\n        _this.method = normalizeMethodName((requestOptions.method));\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        _this.headers = new Headers(requestOptions.headers);\n        _this.contentType = _this.detectContentType();\n        _this.withCredentials = (requestOptions.withCredentials);\n        _this.responseType = (requestOptions.responseType);\n        return _this;\n    }\n    /**\n     * Returns the content type enum based on header options.\n     */\n    /**\n       * Returns the content type enum based on header options.\n       */\n    Request.prototype.detectContentType = /**\n       * Returns the content type enum based on header options.\n       */\n    function () {\n        switch (this.headers.get('content-type')) {\n            case 'application/json':\n                return ContentType.JSON;\n            case 'application/x-www-form-urlencoded':\n                return ContentType.FORM;\n            case 'multipart/form-data':\n                return ContentType.FORM_DATA;\n            case 'text/plain':\n            case 'text/html':\n                return ContentType.TEXT;\n            case 'application/octet-stream':\n                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n            default:\n                return this.detectContentTypeFromBody();\n        }\n    };\n    /**\n     * Returns the content type of request's body based on its type.\n     */\n    /**\n       * Returns the content type of request's body based on its type.\n       */\n    Request.prototype.detectContentTypeFromBody = /**\n       * Returns the content type of request's body based on its type.\n       */\n    function () {\n        if (this._body == null) {\n            return ContentType.NONE;\n        }\n        else if (this._body instanceof URLSearchParams) {\n            return ContentType.FORM;\n        }\n        else if (this._body instanceof FormData) {\n            return ContentType.FORM_DATA;\n        }\n        else if (this._body instanceof Blob$1) {\n            return ContentType.BLOB;\n        }\n        else if (this._body instanceof ArrayBuffer$1) {\n            return ContentType.ARRAY_BUFFER;\n        }\n        else if (this._body && typeof this._body === 'object') {\n            return ContentType.JSON;\n        }\n        else {\n            return ContentType.TEXT;\n        }\n    };\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     */\n    /**\n       * Returns the request's body according to its type. If body is undefined, return\n       * null.\n       */\n    Request.prototype.getBody = /**\n       * Returns the request's body according to its type. If body is undefined, return\n       * null.\n       */\n    function () {\n        switch (this.contentType) {\n            case ContentType.JSON:\n                return this.text();\n            case ContentType.FORM:\n                return this.text();\n            case ContentType.FORM_DATA:\n                return this._body;\n            case ContentType.TEXT:\n                return this.text();\n            case ContentType.BLOB:\n                return this.blob();\n            case ContentType.ARRAY_BUFFER:\n                return this.arrayBuffer();\n            default:\n                return null;\n        }\n    };\n    return Request;\n}(Body));\nfunction urlEncodeParams(params) {\n    var searchParams = new URLSearchParams();\n    Object.keys(params).forEach(function (key) {\n        var value = params[key];\n        if (value && Array.isArray(value)) {\n            value.forEach(function (element) { return searchParams.append(key, element.toString()); });\n        }\n        else {\n            searchParams.append(key, value.toString());\n        }\n    });\n    return searchParams;\n}\nvar noop = function () { };\nvar w = typeof window == 'object' ? window : noop;\nvar FormData = w /** TODO #9100 */['FormData'] || noop;\nvar Blob$1 = w /** TODO #9100 */['Blob'] || noop;\nvar ArrayBuffer$1 = w /** TODO #9100 */['ArrayBuffer'] || noop;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction httpRequest(backend, request) {\n    return backend.createConnection(request).response;\n}\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n    var newOptions = defaultOpts;\n    if (providedOpts) {\n        // Hack so Dart can used named parameters\n        return newOptions.merge(new RequestOptions({\n            method: providedOpts.method || method,\n            url: providedOpts.url || url,\n            search: providedOpts.search,\n            params: providedOpts.params,\n            headers: providedOpts.headers,\n            body: providedOpts.body,\n            withCredentials: providedOpts.withCredentials,\n            responseType: providedOpts.responseType\n        }));\n    }\n    return newOptions.merge(new RequestOptions({ method: method, url: url }));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {@link Response} when a\n * response is received.\n *\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '@angular/http';\n * import {map} from 'rxjs/operators';\n *\n * @Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .pipe(map(res => res.json()))\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '@angular/http';\n * import {MockBackend} from '@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated use @angular/common/http instead\n */\nvar Http = /** @class */ (function () {\n    function Http(_backend, _defaultOptions) {\n        this._backend = _backend;\n        this._defaultOptions = _defaultOptions;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {@link BaseRequestOptions} before performing the request.\n     */\n    /**\n       * Performs any type of http request. First argument is required, and can either be a url or\n       * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n       * object can be provided as the 2nd argument. The options object will be merged with the values\n       * of {@link BaseRequestOptions} before performing the request.\n       */\n    Http.prototype.request = /**\n       * Performs any type of http request. First argument is required, and can either be a url or\n       * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n       * object can be provided as the 2nd argument. The options object will be merged with the values\n       * of {@link BaseRequestOptions} before performing the request.\n       */\n    function (url, options) {\n        var responseObservable;\n        if (typeof url === 'string') {\n            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url)));\n        }\n        else if (url instanceof Request) {\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    /**\n     * Performs a request with `get` http method.\n     */\n    /**\n       * Performs a request with `get` http method.\n       */\n    Http.prototype.get = /**\n       * Performs a request with `get` http method.\n       */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url)));\n    };\n    /**\n     * Performs a request with `post` http method.\n     */\n    /**\n       * Performs a request with `post` http method.\n       */\n    Http.prototype.post = /**\n       * Performs a request with `post` http method.\n       */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, exports.RequestMethod.Post, url)));\n    };\n    /**\n     * Performs a request with `put` http method.\n     */\n    /**\n       * Performs a request with `put` http method.\n       */\n    Http.prototype.put = /**\n       * Performs a request with `put` http method.\n       */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, exports.RequestMethod.Put, url)));\n    };\n    /**\n     * Performs a request with `delete` http method.\n     */\n    /**\n       * Performs a request with `delete` http method.\n       */\n    Http.prototype.delete = /**\n       * Performs a request with `delete` http method.\n       */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Delete, url)));\n    };\n    /**\n     * Performs a request with `patch` http method.\n     */\n    /**\n       * Performs a request with `patch` http method.\n       */\n    Http.prototype.patch = /**\n       * Performs a request with `patch` http method.\n       */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, exports.RequestMethod.Patch, url)));\n    };\n    /**\n     * Performs a request with `head` http method.\n     */\n    /**\n       * Performs a request with `head` http method.\n       */\n    Http.prototype.head = /**\n       * Performs a request with `head` http method.\n       */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Head, url)));\n    };\n    /**\n     * Performs a request with `options` http method.\n     */\n    /**\n       * Performs a request with `options` http method.\n       */\n    Http.prototype.options = /**\n       * Performs a request with `options` http method.\n       */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Options, url)));\n    };\n    Http.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    Http.ctorParameters = function () { return [\n        { type: ConnectionBackend, },\n        { type: RequestOptions, },\n    ]; };\n    return Http;\n}());\n/**\n * @deprecated use @angular/common/http instead\n */\nvar Jsonp = /** @class */ (function (_super) {\n    tslib_1.__extends(Jsonp, _super);\n    function Jsonp(backend, defaultOptions) {\n        return _super.call(this, backend, defaultOptions) || this;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {@link BaseRequestOptions} before performing the request.\n     *\n     * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     */\n    /**\n       * Performs any type of http request. First argument is required, and can either be a url or\n       * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n       * object can be provided as the 2nd argument. The options object will be merged with the values\n       * of {@link BaseRequestOptions} before performing the request.\n       *\n       * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n       * supported by all current browsers. Because JSONP creates a `<script>` element with\n       * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n       * source could expose your application to XSS risks. Data exposed by JSONP may also be\n       * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n       * future security issues (e.g. content sniffing).  For more detail, see the\n       * [Security Guide](http://g.co/ng/security).\n       */\n    Jsonp.prototype.request = /**\n       * Performs any type of http request. First argument is required, and can either be a url or\n       * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n       * object can be provided as the 2nd argument. The options object will be merged with the values\n       * of {@link BaseRequestOptions} before performing the request.\n       *\n       * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n       * supported by all current browsers. Because JSONP creates a `<script>` element with\n       * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n       * source could expose your application to XSS risks. Data exposed by JSONP may also be\n       * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n       * future security issues (e.g. content sniffing).  For more detail, see the\n       * [Security Guide](http://g.co/ng/security).\n       */\n    function (url, options) {\n        var responseObservable;\n        if (typeof url === 'string') {\n            url =\n                new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url));\n        }\n        if (url instanceof Request) {\n            if (url.method !== exports.RequestMethod.Get) {\n                throw new Error('JSONP requests must use GET request method.');\n            }\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    Jsonp.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    Jsonp.ctorParameters = function () { return [\n        { type: ConnectionBackend, },\n        { type: RequestOptions, },\n    ]; };\n    return Jsonp;\n}(Http));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction _createDefaultCookieXSRFStrategy() {\n    return new CookieXSRFStrategy();\n}\nfunction httpFactory(xhrBackend, requestOptions) {\n    return new Http(xhrBackend, requestOptions);\n}\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n    return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * @deprecated use @angular/common/http instead\n */\nvar HttpModule = /** @class */ (function () {\n    function HttpModule() {\n    }\n    HttpModule.decorators = [\n        { type: core.NgModule, args: [{\n                    providers: [\n                        // TODO(pascal): use factory type annotations once supported in DI\n                        // issue: https://github.com/angular/angular/issues/3183\n                        { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                        BrowserXhr,\n                        { provide: RequestOptions, useClass: BaseRequestOptions },\n                        { provide: ResponseOptions, useClass: BaseResponseOptions },\n                        XHRBackend,\n                        { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n                    ],\n                },] }\n    ];\n    /** @nocollapse */\n    HttpModule.ctorParameters = function () { return []; };\n    return HttpModule;\n}());\n/**\n * The module that includes jsonp's providers\n *\n * @deprecated use @angular/common/http instead\n */\nvar JsonpModule = /** @class */ (function () {\n    function JsonpModule() {\n    }\n    JsonpModule.decorators = [\n        { type: core.NgModule, args: [{\n                    providers: [\n                        // TODO(pascal): use factory type annotations once supported in DI\n                        // issue: https://github.com/angular/angular/issues/3183\n                        { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                        BrowserJsonp,\n                        { provide: RequestOptions, useClass: BaseRequestOptions },\n                        { provide: ResponseOptions, useClass: BaseResponseOptions },\n                        JSONPBackend,\n                    ],\n                },] }\n    ];\n    /** @nocollapse */\n    JsonpModule.ctorParameters = function () { return []; };\n    return JsonpModule;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated use @angular/common/http instead\n */\nvar VERSION = new core.Version('6.0.0-rc.4');\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexports.ɵangular_packages_http_http_e = BrowserJsonp;\nexports.ɵangular_packages_http_http_f = Body;\nexports.ɵangular_packages_http_http_a = _createDefaultCookieXSRFStrategy;\nexports.ɵangular_packages_http_http_b = httpFactory;\nexports.ɵangular_packages_http_http_c = jsonpFactory;\nexports.BrowserXhr = BrowserXhr;\nexports.JSONPBackend = JSONPBackend;\nexports.JSONPConnection = JSONPConnection;\nexports.CookieXSRFStrategy = CookieXSRFStrategy;\nexports.XHRBackend = XHRBackend;\nexports.XHRConnection = XHRConnection;\nexports.BaseRequestOptions = BaseRequestOptions;\nexports.RequestOptions = RequestOptions;\nexports.BaseResponseOptions = BaseResponseOptions;\nexports.ResponseOptions = ResponseOptions;\nexports.Headers = Headers;\nexports.Http = Http;\nexports.Jsonp = Jsonp;\nexports.HttpModule = HttpModule;\nexports.JsonpModule = JsonpModule;\nexports.Connection = Connection;\nexports.ConnectionBackend = ConnectionBackend;\nexports.XSRFStrategy = XSRFStrategy;\nexports.Request = Request;\nexports.Response = Response;\nexports.QueryEncoder = QueryEncoder;\nexports.URLSearchParams = URLSearchParams;\nexports.VERSION = VERSION;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=http.umd.js.map\n"]}