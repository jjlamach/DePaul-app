{"version":3,"sources":["packages/router/router-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","router","testing","tslib","common","core","this","tslib_1","SpyNgModuleFactoryLoader","compiler","_stubbedModules","Object","defineProperty","prototype","get","set","modules","e_1","_c","res","_a","__values","keys","_b","next","done","t","value","compileModuleAsync","e_1_1","error","return","call","enumerable","configurable","load","path","Promise","reject","Error","decorators","type","Injectable","ctorParameters","Compiler","setupTestingRouter","urlSerializer","contexts","location","loader","injector","routes","opts","urlHandlingStrategy","router$$1","Router","ɵflatten","isUrlHandlingStrategy","paramsInheritanceStrategy","RouterTestingModule","withRoutes","config","ngModule","providers","provideRoutes","provide","ROUTER_CONFIGURATION","useValue","NgModule","args","RouterModule","ɵROUTER_PROVIDERS","Location","useClass","SpyLocation","LocationStrategy","MockLocationStrategy","NgModuleFactoryLoader","useFactory","deps","UrlSerializer","ChildrenOutletContexts","Injector","ROUTES","UrlHandlingStrategy","Optional","PreloadingStrategy","useExisting","NoPreloading"],"mappings":"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","sourcesContent":["/**\n * @license Angular v6.0.0-rc.4\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/common'), require('@angular/common/testing'), require('@angular/core'), require('@angular/router')) :\n\ttypeof define === 'function' && define.amd ? define('@angular/router/testing', ['exports', 'tslib', '@angular/common', '@angular/common/testing', '@angular/core', '@angular/router'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.router = global.ng.router || {}, global.ng.router.testing = {}),global.tslib,global.ng.common,global.ng.common.testing,global.ng.core,global.ng.router));\n}(this, (function (exports,tslib_1,common,testing,core,router) { 'use strict';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * Allows to simulate the loading of ng modules in tests.\n *\n * ```\n * const loader = TestBed.get(NgModuleFactoryLoader);\n *\n * @Component({template: 'lazy-loaded'})\n * class LazyLoadedComponent {}\n * @NgModule({\n *   declarations: [LazyLoadedComponent],\n *   imports: [RouterModule.forChild([{path: 'loaded', component: LazyLoadedComponent}])]\n * })\n *\n * class LoadedModule {}\n *\n * // sets up stubbedModules\n * loader.stubbedModules = {lazyModule: LoadedModule};\n *\n * router.resetConfig([\n *   {path: 'lazy', loadChildren: 'lazyModule'},\n * ]);\n *\n * router.navigateByUrl('/lazy/loaded');\n * ```\n *\n *\n */\nvar SpyNgModuleFactoryLoader = /** @class */ (function () {\n    function SpyNgModuleFactoryLoader(compiler) {\n        this.compiler = compiler;\n        /**\n           * @docsNotRequired\n           */\n        this._stubbedModules = {};\n    }\n    Object.defineProperty(SpyNgModuleFactoryLoader.prototype, \"stubbedModules\", {\n        /**\n         * @docsNotRequired\n         */\n        get: /**\n           * @docsNotRequired\n           */\n        function () { return this._stubbedModules; },\n        /**\n         * @docsNotRequired\n         */\n        set: /**\n           * @docsNotRequired\n           */\n        function (modules) {\n            var res = {};\n            try {\n                for (var _a = tslib_1.__values(Object.keys(modules)), _b = _a.next(); !_b.done; _b = _a.next()) {\n                    var t = _b.value;\n                    res[t] = this.compiler.compileModuleAsync(modules[t]);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            this._stubbedModules = res;\n            var e_1, _c;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SpyNgModuleFactoryLoader.prototype.load = function (path) {\n        if (this._stubbedModules[path]) {\n            return this._stubbedModules[path];\n        }\n        else {\n            return Promise.reject(new Error(\"Cannot find module \" + path));\n        }\n    };\n    SpyNgModuleFactoryLoader.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    SpyNgModuleFactoryLoader.ctorParameters = function () { return [\n        { type: core.Compiler, },\n    ]; };\n    return SpyNgModuleFactoryLoader;\n}());\nfunction isUrlHandlingStrategy(opts) {\n    // This property check is needed because UrlHandlingStrategy is an interface and doesn't exist at\n    // runtime.\n    return 'shouldProcessUrl' in opts;\n}\n/**\n * Router setup factory function used for testing.\n *\n *\n */\nfunction setupTestingRouter(urlSerializer, contexts, location, loader, compiler, injector, routes, opts, urlHandlingStrategy) {\n    var router$$1 = new router.Router((null), urlSerializer, contexts, location, injector, loader, compiler, router.ɵflatten(routes));\n    // Handle deprecated argument ordering.\n    if (opts) {\n        if (isUrlHandlingStrategy(opts)) {\n            router$$1.urlHandlingStrategy = opts;\n        }\n        else if (opts.paramsInheritanceStrategy) {\n            router$$1.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;\n        }\n    }\n    if (urlHandlingStrategy) {\n        router$$1.urlHandlingStrategy = urlHandlingStrategy;\n    }\n    return router$$1;\n}\n/**\n * @description\n *\n * Sets up the router to be used for testing.\n *\n * The modules sets up the router to be used for testing.\n * It provides spy implementations of `Location`, `LocationStrategy`, and {@link\n * NgModuleFactoryLoader}.\n *\n * ### Example\n *\n * ```\n * beforeEach(() => {\n *   TestBed.configureTestModule({\n *     imports: [\n *       RouterTestingModule.withRoutes(\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}]\n *       )\n *     ]\n *   });\n * });\n * ```\n *\n *\n */\nvar RouterTestingModule = /** @class */ (function () {\n    function RouterTestingModule() {\n    }\n    RouterTestingModule.withRoutes = function (routes, config) {\n        return {\n            ngModule: RouterTestingModule,\n            providers: [\n                router.provideRoutes(routes),\n                { provide: router.ROUTER_CONFIGURATION, useValue: config ? config : {} },\n            ]\n        };\n    };\n    RouterTestingModule.decorators = [\n        { type: core.NgModule, args: [{\n                    exports: [router.RouterModule],\n                    providers: [\n                        router.ɵROUTER_PROVIDERS, { provide: common.Location, useClass: testing.SpyLocation },\n                        { provide: common.LocationStrategy, useClass: testing.MockLocationStrategy },\n                        { provide: core.NgModuleFactoryLoader, useClass: SpyNgModuleFactoryLoader }, {\n                            provide: router.Router,\n                            useFactory: setupTestingRouter,\n                            deps: [\n                                router.UrlSerializer, router.ChildrenOutletContexts, common.Location, core.NgModuleFactoryLoader, core.Compiler, core.Injector,\n                                router.ROUTES, router.ROUTER_CONFIGURATION, [router.UrlHandlingStrategy, new core.Optional()]\n                            ]\n                        },\n                        { provide: router.PreloadingStrategy, useExisting: router.NoPreloading }, router.provideRoutes([])\n                    ]\n                },] }\n    ];\n    /** @nocollapse */\n    RouterTestingModule.ctorParameters = function () { return []; };\n    return RouterTestingModule;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexports.SpyNgModuleFactoryLoader = SpyNgModuleFactoryLoader;\nexports.setupTestingRouter = setupTestingRouter;\nexports.RouterTestingModule = RouterTestingModule;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=router-testing.umd.js.map\n"]}