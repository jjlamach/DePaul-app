/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as tslib_1 from "tslib";
import { flatten, identifierName, sanitizeIdentifier, tokenReference } from '../compile_metadata';
import { BindingForm, BuiltinFunctionCall, convertActionBinding, convertPropertyBinding } from '../compiler_util/expression_converter';
import { AstMemoryEfficientTransformer, FunctionCall, ImplicitReceiver, LiteralPrimitive, PropertyRead } from '../expression_parser/ast';
import { Identifiers } from '../identifiers';
import { LifecycleHooks } from '../lifecycle_reflector';
import * as o from '../output/output_ast';
import { typeSourceSpan } from '../parse_util';
import { CssSelector } from '../selector';
import { PropertyBindingType, RecursiveTemplateAstVisitor, TextAst, templateVisitAll } from '../template_parser/template_ast';
import { error } from '../util';
import { Identifiers as R3 } from './r3_identifiers';
import { BUILD_OPTIMIZER_COLOCATE } from './r3_types';
/** Name of the context parameter passed into a template function */
var CONTEXT_NAME = 'ctx';
/** Name of the RenderFlag passed into a template function */
var RENDER_FLAGS = 'rf';
/** Name of the temporary to use during data binding */
var TEMPORARY_NAME = '_t';
/** The prefix reference variables */
var REFERENCE_PREFIX = '_r';
/** The name of the implicit context reference */
var IMPLICIT_REFERENCE = '$implicit';
/** Name of the i18n attributes **/
var I18N_ATTR = 'i18n';
var I18N_ATTR_PREFIX = 'i18n-';
/** I18n separators for metadata **/
var MEANING_SEPARATOR = '|';
var ID_SEPARATOR = '@@';
export function compileDirective(outputCtx, directive, reflector, bindingParser, mode) {
    var definitionMapValues = [];
    var field = function (key, value) {
        if (value) {
            definitionMapValues.push({ key: key, value: value, quoted: false });
        }
    };
    // e.g. 'type: MyDirective`
    field('type', outputCtx.importExpr(directive.type.reference));
    // e.g. `selectors: [['', 'someDir', '']]`
    field('selectors', createDirectiveSelector(directive.selector));
    // e.g. `factory: () => new MyApp(injectElementRef())`
    field('factory', createFactory(directive.type, outputCtx, reflector, directive.queries));
    // e.g. `hostBindings: (dirIndex, elIndex) => { ... }
    field('hostBindings', createHostBindingsFunction(directive, outputCtx, bindingParser));
    // e.g. `attributes: ['role', 'listbox']`
    field('attributes', createHostAttributesArray(directive, outputCtx));
    // e.g 'inputs: {a: 'a'}`
    field('inputs', conditionallyCreateMapObjectLiteral(directive.inputs, outputCtx));
    // e.g 'outputs: {a: 'a'}`
    field('outputs', conditionallyCreateMapObjectLiteral(directive.outputs, outputCtx));
    var className = identifierName(directive.type);
    className || error("Cannot resolver the name of " + directive.type);
    var definitionField = outputCtx.constantPool.propertyNameOf(1 /* Directive */);
    var definitionFunction = o.importExpr(R3.defineDirective).callFn([o.literalMap(definitionMapValues)]);
    if (mode === 0 /* PartialClass */) {
        // Create the partial class to be merged with the actual class.
        outputCtx.statements.push(new o.ClassStmt(
        /* name */ className, 
        /* parent */ null, 
        /* fields */ [new o.ClassField(
            /* name */ definitionField, 
            /* type */ o.INFERRED_TYPE, 
            /* modifiers */ [o.StmtModifier.Static], 
            /* initializer */ definitionFunction)], 
        /* getters */ [], 
        /* constructorMethod */ new o.ClassMethod(null, [], []), 
        /* methods */ []));
    }
    else {
        // Create back-patch definition.
        var classReference = outputCtx.importExpr(directive.type.reference);
        // Create the back-patch statement
        outputCtx.statements.push(new o.CommentStmt(BUILD_OPTIMIZER_COLOCATE));
        outputCtx.statements.push(classReference.prop(definitionField).set(definitionFunction).toStmt());
    }
}
export function compileComponent(outputCtx, component, pipes, template, reflector, bindingParser, mode) {
    var definitionMapValues = [];
    // Set of pipe names for pipe exps that have already been stored in pipes[] (to avoid dupes)
    var pipeSet = new Set();
    // Pipe expressions for pipes[] field in component def
    var pipeExps = [];
    function addPipeDependency(summary) {
        addDependencyToComponent(outputCtx, summary, pipeSet, pipeExps);
    }
    var directiveExps = [];
    var directiveMap = new Set();
    /**
     * This function gets called every time a directive dependency needs to be added to the template.
     * Its job is to remove duplicates from the list. (Only have single dependency no matter how many
     * times the dependency is used.)
     */
    function addDirectiveDependency(ast) {
        var importExpr = outputCtx.importExpr(ast.directive.type.reference);
        var uniqueKey = importExpr.value.moduleName + ':' + importExpr.value.name;
        if (!directiveMap.has(uniqueKey)) {
            directiveMap.add(uniqueKey);
            directiveExps.push(importExpr);
        }
    }
    var field = function (key, value) {
        if (value) {
            definitionMapValues.push({ key: key, value: value, quoted: false });
        }
    };
    // e.g. `type: MyApp`
    field('type', outputCtx.importExpr(component.type.reference));
    // e.g. `selectors: [['my-app']]`
    field('selectors', createDirectiveSelector(component.selector));
    var selector = component.selector && CssSelector.parse(component.selector);
    var firstSelector = selector && selector[0];
    // e.g. `attr: ["class", ".my.app"]
    // This is optional an only included if the first selector of a component specifies attributes.
    if (firstSelector) {
        var selectorAttributes = firstSelector.getAttrs();
        if (selectorAttributes.length) {
            field('attrs', outputCtx.constantPool.getConstLiteral(o.literalArr(selectorAttributes.map(function (value) { return value != null ? o.literal(value) : o.literal(undefined); })), 
            /* forceShared */ true));
        }
    }
    // e.g. `factory: function MyApp_Factory() { return new MyApp(injectElementRef()); }`
    field('factory', createFactory(component.type, outputCtx, reflector, component.queries));
    // e.g `hostBindings: function MyApp_HostBindings { ... }
    field('hostBindings', createHostBindingsFunction(component, outputCtx, bindingParser));
    // e.g. `template: function MyComponent_Template(_ctx, _cm) {...}`
    var templateTypeName = component.type.reference.name;
    var templateName = templateTypeName ? templateTypeName + "_Template" : null;
    var pipeMap = new Map(pipes.map(function (pipe) { return [pipe.name, pipe]; }));
    var templateFunctionExpression = new TemplateDefinitionBuilder(outputCtx, outputCtx.constantPool, reflector, CONTEXT_NAME, BindingScope.ROOT_SCOPE, 0, component.template.ngContentSelectors, templateTypeName, templateName, pipeMap, component.viewQueries, addDirectiveDependency, addPipeDependency)
        .buildTemplateFunction(template, []);
    field('template', templateFunctionExpression);
    if (directiveExps.length) {
        field('directives', o.literalArr(directiveExps));
    }
    // e.g. `pipes: [MyPipe]`
    if (pipeExps.length) {
        field('pipes', o.literalArr(pipeExps));
    }
    // e.g `inputs: {a: 'a'}`
    field('inputs', conditionallyCreateMapObjectLiteral(component.inputs, outputCtx));
    // e.g 'outputs: {a: 'a'}`
    field('outputs', conditionallyCreateMapObjectLiteral(component.outputs, outputCtx));
    // e.g. `features: [NgOnChangesFeature(MyComponent)]`
    var features = [];
    if (component.type.lifecycleHooks.some(function (lifecycle) { return lifecycle == LifecycleHooks.OnChanges; })) {
        features.push(o.importExpr(R3.NgOnChangesFeature, null, null).callFn([outputCtx.importExpr(component.type.reference)]));
    }
    if (features.length) {
        field('features', o.literalArr(features));
    }
    var definitionField = outputCtx.constantPool.propertyNameOf(2 /* Component */);
    var definitionFunction = o.importExpr(R3.defineComponent).callFn([o.literalMap(definitionMapValues)]);
    if (mode === 0 /* PartialClass */) {
        var className = identifierName(component.type);
        className || error("Cannot resolver the name of " + component.type);
        // Create the partial class to be merged with the actual class.
        outputCtx.statements.push(new o.ClassStmt(
        /* name */ className, 
        /* parent */ null, 
        /* fields */ [new o.ClassField(
            /* name */ definitionField, 
            /* type */ o.INFERRED_TYPE, 
            /* modifiers */ [o.StmtModifier.Static], 
            /* initializer */ definitionFunction)], 
        /* getters */ [], 
        /* constructorMethod */ new o.ClassMethod(null, [], []), 
        /* methods */ []));
    }
    else {
        var classReference = outputCtx.importExpr(component.type.reference);
        // Create the back-patch statement
        outputCtx.statements.push(new o.CommentStmt(BUILD_OPTIMIZER_COLOCATE), classReference.prop(definitionField).set(definitionFunction).toStmt());
    }
}
// TODO: this should be used for addDirectiveDependency as well when Misko's PR goes in
function addDependencyToComponent(outputCtx, summary, set, exps) {
    var importExpr = outputCtx.importExpr(summary.type.reference);
    var uniqueKey = importExpr.value.moduleName + ':' + importExpr.value.name;
    if (!set.has(uniqueKey)) {
        set.add(uniqueKey);
        exps.push(importExpr);
    }
}
// TODO: Remove these when the things are fully supported
function unknown(arg) {
    throw new Error("Builder " + this.constructor.name + " is unable to handle " + arg.constructor.name + " yet");
}
function unsupported(feature) {
    if (this) {
        throw new Error("Builder " + this.constructor.name + " doesn't support " + feature + " yet");
    }
    throw new Error("Feature " + feature + " is not supported yet");
}
var BINDING_INSTRUCTION_MAP = (_a = {},
    _a[PropertyBindingType.Property] = R3.elementProperty,
    _a[PropertyBindingType.Attribute] = R3.elementAttribute,
    _a[PropertyBindingType.Class] = R3.elementClassNamed,
    _a[PropertyBindingType.Style] = R3.elementStyleNamed,
    _a);
function interpolate(args) {
    args = args.slice(1); // Ignore the length prefix added for render2
    switch (args.length) {
        case 3:
            return o.importExpr(R3.interpolation1).callFn(args);
        case 5:
            return o.importExpr(R3.interpolation2).callFn(args);
        case 7:
            return o.importExpr(R3.interpolation3).callFn(args);
        case 9:
            return o.importExpr(R3.interpolation4).callFn(args);
        case 11:
            return o.importExpr(R3.interpolation5).callFn(args);
        case 13:
            return o.importExpr(R3.interpolation6).callFn(args);
        case 15:
            return o.importExpr(R3.interpolation7).callFn(args);
        case 17:
            return o.importExpr(R3.interpolation8).callFn(args);
    }
    (args.length >= 19 && args.length % 2 == 1) ||
        error("Invalid interpolation argument length " + args.length);
    return o.importExpr(R3.interpolationV).callFn([o.literalArr(args)]);
}
function pipeBinding(args) {
    switch (args.length) {
        case 0:
            // The first parameter to pipeBind is always the value to be transformed followed
            // by arg.length arguments so the total number of arguments to pipeBind are
            // arg.length + 1.
            return R3.pipeBind1;
        case 1:
            return R3.pipeBind2;
        case 2:
            return R3.pipeBind3;
        default:
            return R3.pipeBindV;
    }
}
var pureFunctionIdentifiers = [
    R3.pureFunction0, R3.pureFunction1, R3.pureFunction2, R3.pureFunction3, R3.pureFunction4,
    R3.pureFunction5, R3.pureFunction6, R3.pureFunction7, R3.pureFunction8
];
function getLiteralFactory(outputContext, literal) {
    var _a = outputContext.constantPool.getLiteralFactory(literal), literalFactory = _a.literalFactory, literalFactoryArguments = _a.literalFactoryArguments;
    literalFactoryArguments.length > 0 || error("Expected arguments to a literal factory function");
    var pureFunctionIdent = pureFunctionIdentifiers[literalFactoryArguments.length] || R3.pureFunctionV;
    // Literal factories are pure functions that only need to be re-invoked when the parameters
    // change.
    return o.importExpr(pureFunctionIdent).callFn(tslib_1.__spread([literalFactory], literalFactoryArguments));
}
function noop() { }
var BindingScope = /** @class */ (function () {
    function BindingScope(parent, declareLocalVarCallback) {
        if (parent === void 0) { parent = null; }
        if (declareLocalVarCallback === void 0) { declareLocalVarCallback = noop; }
        this.parent = parent;
        this.declareLocalVarCallback = declareLocalVarCallback;
        /**
         * Keeps a map from local variables to their expressions.
         *
         * This is used when one refers to variable such as: 'let abc = a.b.c`.
         * - key to the map is the string literal `"abc"`.
         * - value `lhs` is the left hand side which is an AST representing `abc`.
         * - value `rhs` is the right hand side which is an AST representing `a.b.c`.
         * - value `declared` is true if the `declareLocalVarCallback` has been called for this scope
         * already.
         */
        this.map = new Map();
        this.referenceNameIndex = 0;
    }
    BindingScope.prototype.get = function (name) {
        var current = this;
        while (current) {
            var value = current.map.get(name);
            if (value != null) {
                if (current !== this) {
                    // make a local copy and reset the `declared` state.
                    value = { lhs: value.lhs, rhs: value.rhs, declared: false };
                    // Cache the value locally.
                    this.map.set(name, value);
                }
                if (value.rhs && !value.declared) {
                    // if it is first time we are referencing the variable in the scope
                    // than invoke the callback to insert variable declaration.
                    this.declareLocalVarCallback(value.lhs, value.rhs);
                    value.declared = true;
                }
                return value.lhs;
            }
            current = current.parent;
        }
        return null;
    };
    /**
     * Create a local variable for later reference.
     *
     * @param name Name of the variable.
     * @param lhs AST representing the left hand side of the `let lhs = rhs;`.
     * @param rhs AST representing the right hand side of the `let lhs = rhs;`. The `rhs` can be
     * `undefined` for variable that are ambient such as `$event` and which don't have `rhs`
     * declaration.
     */
    BindingScope.prototype.set = function (name, lhs, rhs) {
        !this.map.has(name) ||
            error("The name " + name + " is already defined in scope to be " + this.map.get(name));
        this.map.set(name, { lhs: lhs, rhs: rhs, declared: false });
        return this;
    };
    BindingScope.prototype.getLocal = function (name) { return this.get(name); };
    BindingScope.prototype.nestedScope = function (declareCallback) {
        return new BindingScope(this, declareCallback);
    };
    BindingScope.prototype.freshReferenceName = function () {
        var current = this;
        // Find the top scope as it maintains the global reference count
        while (current.parent)
            current = current.parent;
        var ref = "" + REFERENCE_PREFIX + current.referenceNameIndex++;
        return ref;
    };
    BindingScope.ROOT_SCOPE = new BindingScope().set('$event', o.variable('$event'));
    return BindingScope;
}());
var TemplateDefinitionBuilder = /** @class */ (function () {
    function TemplateDefinitionBuilder(outputCtx, constantPool, reflector, contextParameter, parentBindingScope, level, ngContentSelectors, contextName, templateName, pipes, viewQueries, addDirectiveDependency, addPipeDependency) {
        if (level === void 0) { level = 0; }
        var _this = this;
        this.outputCtx = outputCtx;
        this.constantPool = constantPool;
        this.reflector = reflector;
        this.contextParameter = contextParameter;
        this.level = level;
        this.ngContentSelectors = ngContentSelectors;
        this.contextName = contextName;
        this.templateName = templateName;
        this.pipes = pipes;
        this.viewQueries = viewQueries;
        this.addDirectiveDependency = addDirectiveDependency;
        this.addPipeDependency = addPipeDependency;
        this._dataIndex = 0;
        this._bindingContext = 0;
        this._temporaryAllocated = false;
        this._prefix = [];
        this._creationMode = [];
        this._variableMode = [];
        this._bindingMode = [];
        this._postfix = [];
        this._projectionDefinitionIndex = 0;
        this.unsupported = unsupported;
        this.invalid = invalid;
        // Whether we are inside a translatable element (`<p i18n>... somewhere here ... </p>)
        this._inI18nSection = false;
        this._i18nSectionIndex = -1;
        // Maps of placeholder to node indexes for each of the i18n section
        this._phToNodeIdxes = [{}];
        // These should be handled in the template or element directly.
        this.visitReference = invalid;
        this.visitVariable = invalid;
        this.visitEvent = invalid;
        this.visitElementProperty = invalid;
        this.visitAttr = invalid;
        // These should be handled in the template or element directly
        this.visitDirective = invalid;
        this.visitDirectiveProperty = invalid;
        this.bindingScope =
            parentBindingScope.nestedScope(function (lhsVar, expression) {
                _this._bindingMode.push(lhsVar.set(expression).toDeclStmt(o.INFERRED_TYPE, [o.StmtModifier.Final]));
            });
        this._valueConverter = new ValueConverter(outputCtx, function () { return _this.allocateDataSlot(); }, function (name, localName, slot, value) {
            _this.bindingScope.set(localName, value);
            var pipe = pipes.get(name);
            pipe || error("Could not find pipe " + name);
            _this.addPipeDependency(pipe);
            _this._creationMode.push(o.importExpr(R3.pipe).callFn([o.literal(slot), o.literal(name)]).toStmt());
        });
    }
    TemplateDefinitionBuilder.prototype.buildTemplateFunction = function (asts, variables) {
        try {
            // Create variable bindings
            for (var variables_1 = tslib_1.__values(variables), variables_1_1 = variables_1.next(); !variables_1_1.done; variables_1_1 = variables_1.next()) {
                var variable = variables_1_1.value;
                var variableName = variable.name;
                var expression = o.variable(this.contextParameter).prop(variable.value || IMPLICIT_REFERENCE);
                var scopedName = this.bindingScope.freshReferenceName();
                // Add the reference to the local scope.
                this.bindingScope.set(variableName, o.variable(variableName + scopedName), expression);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (variables_1_1 && !variables_1_1.done && (_a = variables_1.return)) _a.call(variables_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // Collect content projections
        if (this.ngContentSelectors && this.ngContentSelectors.length > 0) {
            var contentProjections = getContentProjection(asts, this.ngContentSelectors);
            this._contentProjections = contentProjections;
            if (contentProjections.size > 0) {
                var infos_1 = [];
                Array.from(contentProjections.values()).forEach(function (info) {
                    if (info.selector) {
                        infos_1[info.index - 1] = info.selector;
                    }
                });
                var projectionIndex = this._projectionDefinitionIndex = this.allocateDataSlot();
                var parameters = [o.literal(projectionIndex)];
                !infos_1.some(function (value) { return !value; }) || error("content project information skipped an index");
                if (infos_1.length > 1) {
                    parameters.push(this.outputCtx.constantPool.getConstLiteral(asLiteral(infos_1), /* forceShared */ true));
                }
                this.instruction.apply(this, tslib_1.__spread([this._creationMode, null, R3.projectionDef], parameters));
            }
        }
        try {
            // Define and update any view queries
            for (var _b = tslib_1.__values(this.viewQueries), _c = _b.next(); !_c.done; _c = _b.next()) {
                var query = _c.value;
                // e.g. r3.Q(0, SomeDirective, true);
                var querySlot = this.allocateDataSlot();
                var predicate = getQueryPredicate(query, this.outputCtx);
                var args = [
                    /* memoryIndex */ o.literal(querySlot, o.INFERRED_TYPE),
                    /* predicate */ predicate,
                    /* descend */ o.literal(query.descendants, o.INFERRED_TYPE)
                ];
                if (query.read) {
                    args.push(this.outputCtx.importExpr(query.read.identifier.reference));
                }
                this.instruction.apply(this, tslib_1.__spread([this._creationMode, null, R3.query], args));
                // (r3.qR(tmp = r3.ɵld(0)) && (ctx.someDir = tmp));
                var temporary = this.temp();
                var getQueryList = o.importExpr(R3.load).callFn([o.literal(querySlot)]);
                var refresh = o.importExpr(R3.queryRefresh).callFn([temporary.set(getQueryList)]);
                var updateDirective = o.variable(CONTEXT_NAME)
                    .prop(query.propertyName)
                    .set(query.first ? temporary.prop('first') : temporary);
                this._bindingMode.push(refresh.and(updateDirective).toStmt());
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_d = _b.return)) _d.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        templateVisitAll(this, asts);
        var creationMode = this._creationMode.length > 0 ?
            [o.ifStmt(o.variable(RENDER_FLAGS).bitwiseAnd(o.literal(1 /* Create */), null, false), this._creationMode)] :
            [];
        var updateMode = this._bindingMode.length > 0 ?
            [o.ifStmt(o.variable(RENDER_FLAGS).bitwiseAnd(o.literal(2 /* Update */), null, false), this._bindingMode)] :
            [];
        try {
            // Generate maps of placeholder name to node indexes
            // TODO(vicb): This is a WIP, not fully supported yet
            for (var _e = tslib_1.__values(this._phToNodeIdxes), _f = _e.next(); !_f.done; _f = _e.next()) {
                var phToNodeIdx = _f.value;
                if (Object.keys(phToNodeIdx).length > 0) {
                    var scopedName = this.bindingScope.freshReferenceName();
                    var phMap = o.variable(scopedName)
                        .set(mapToExpression(phToNodeIdx, true))
                        .toDeclStmt(o.INFERRED_TYPE, [o.StmtModifier.Final]);
                    this._prefix.push(phMap);
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_g = _e.return)) _g.call(_e);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return o.fn([new o.FnParam(RENDER_FLAGS, o.NUMBER_TYPE), new o.FnParam(this.contextParameter, null)], tslib_1.__spread(this._prefix, creationMode, this._variableMode, updateMode, this._postfix), o.INFERRED_TYPE, null, this.templateName);
        var e_1, _a, e_2, _d, e_3, _g;
    };
    // LocalResolver
    TemplateDefinitionBuilder.prototype.getLocal = function (name) { return this.bindingScope.get(name); };
    // TemplateAstVisitor
    TemplateDefinitionBuilder.prototype.visitNgContent = function (ast) {
        var info = this._contentProjections.get(ast);
        info || error("Expected " + ast.sourceSpan + " to be included in content projection collection");
        var slot = this.allocateDataSlot();
        var parameters = [o.literal(slot), o.literal(this._projectionDefinitionIndex)];
        if (info.index !== 0) {
            parameters.push(o.literal(info.index));
        }
        this.instruction.apply(this, tslib_1.__spread([this._creationMode, ast.sourceSpan, R3.projection], parameters));
    };
    // TemplateAstVisitor
    TemplateDefinitionBuilder.prototype.visitElement = function (element) {
        var _this = this;
        var elementIndex = this.allocateDataSlot();
        var referenceDataSlots = new Map();
        var wasInI18nSection = this._inI18nSection;
        var outputAttrs = {};
        var attrI18nMetas = {};
        var i18nMeta = '';
        // Elements inside i18n sections are replaced with placeholders
        // TODO(vicb): nested elements are a WIP in this phase
        if (this._inI18nSection) {
            var phName = element.name.toLowerCase();
            if (!this._phToNodeIdxes[this._i18nSectionIndex][phName]) {
                this._phToNodeIdxes[this._i18nSectionIndex][phName] = [];
            }
            this._phToNodeIdxes[this._i18nSectionIndex][phName].push(elementIndex);
        }
        try {
            // Handle i18n attributes
            for (var _a = tslib_1.__values(element.attrs), _b = _a.next(); !_b.done; _b = _a.next()) {
                var attr = _b.value;
                var name_1 = attr.name;
                var value = attr.value;
                if (name_1 === I18N_ATTR) {
                    if (this._inI18nSection) {
                        throw new Error("Could not mark an element as translatable inside of a translatable section");
                    }
                    this._inI18nSection = true;
                    this._i18nSectionIndex++;
                    this._phToNodeIdxes[this._i18nSectionIndex] = {};
                    i18nMeta = value;
                }
                else if (name_1.startsWith(I18N_ATTR_PREFIX)) {
                    attrI18nMetas[name_1.slice(I18N_ATTR_PREFIX.length)] = value;
                }
                else {
                    outputAttrs[name_1] = value;
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_4) throw e_4.error; }
        }
        // Element creation mode
        var component = findComponent(element.directives);
        var nullNode = o.literal(null, o.INFERRED_TYPE);
        var parameters = [o.literal(elementIndex)];
        if (component) {
            this.addDirectiveDependency(component);
        }
        element.directives.forEach(this.addDirectiveDependency);
        parameters.push(o.literal(element.name));
        // Add the attributes
        var i18nMessages = [];
        var attributes = [];
        var hasI18nAttr = false;
        Object.getOwnPropertyNames(outputAttrs).forEach(function (name) {
            var value = outputAttrs[name];
            attributes.push(o.literal(name));
            if (attrI18nMetas.hasOwnProperty(name)) {
                hasI18nAttr = true;
                var meta = parseI18nMeta(attrI18nMetas[name]);
                var variable = _this.constantPool.getTranslation(value, meta);
                attributes.push(variable);
            }
            else {
                attributes.push(o.literal(value));
            }
        });
        var attrArg = nullNode;
        if (attributes.length > 0) {
            attrArg = hasI18nAttr ? getLiteralFactory(this.outputCtx, o.literalArr(attributes)) :
                this.constantPool.getConstLiteral(o.literalArr(attributes), true);
        }
        parameters.push(attrArg);
        if (element.references && element.references.length > 0) {
            var references = flatten(element.references.map(function (reference) {
                var slot = _this.allocateDataSlot();
                referenceDataSlots.set(reference.name, slot);
                // Generate the update temporary.
                var variableName = _this.bindingScope.freshReferenceName();
                _this._variableMode.push(o.variable(variableName, o.INFERRED_TYPE)
                    .set(o.importExpr(R3.load).callFn([o.literal(slot)]))
                    .toDeclStmt(o.INFERRED_TYPE, [o.StmtModifier.Final]));
                _this.bindingScope.set(reference.name, o.variable(variableName));
                return [reference.name, reference.originalValue];
            })).map(function (value) { return o.literal(value); });
            parameters.push(this.constantPool.getConstLiteral(o.literalArr(references), /* forceShared */ true));
        }
        else {
            parameters.push(nullNode);
        }
        // Generate the instruction create element instruction
        if (i18nMessages.length > 0) {
            (_d = this._creationMode).push.apply(_d, tslib_1.__spread(i18nMessages));
        }
        this.instruction.apply(this, tslib_1.__spread([this._creationMode, element.sourceSpan, R3.createElement], trimTrailingNulls(parameters)));
        var implicit = o.variable(CONTEXT_NAME);
        // Generate Listeners (outputs)
        element.outputs.forEach(function (outputAst) {
            var functionName = _this.templateName + "_" + element.name + "_" + outputAst.name + "_listener";
            var localVars = [];
            var bindingScope = _this.bindingScope.nestedScope(function (lhsVar, rhsExpression) {
                localVars.push(lhsVar.set(rhsExpression).toDeclStmt(o.INFERRED_TYPE, [o.StmtModifier.Final]));
            });
            var bindingExpr = convertActionBinding(bindingScope, o.variable(CONTEXT_NAME), outputAst.handler, 'b', function () { return error('Unexpected interpolation'); });
            var handler = o.fn([new o.FnParam('$event', o.DYNAMIC_TYPE)], tslib_1.__spread(localVars, bindingExpr.render3Stmts), o.INFERRED_TYPE, null, functionName);
            _this.instruction(_this._creationMode, outputAst.sourceSpan, R3.listener, o.literal(outputAst.name), handler);
        });
        try {
            // Generate element input bindings
            for (var _e = tslib_1.__values(element.inputs), _f = _e.next(); !_f.done; _f = _e.next()) {
                var input = _f.value;
                if (input.isAnimation) {
                    this.unsupported('animations');
                }
                var convertedBinding = this.convertPropertyBinding(implicit, input.value);
                var instruction = BINDING_INSTRUCTION_MAP[input.type];
                if (instruction) {
                    // TODO(chuckj): runtime: security context?
                    this.instruction(this._bindingMode, input.sourceSpan, instruction, o.literal(elementIndex), o.literal(input.name), convertedBinding);
                }
                else {
                    this.unsupported("binding " + PropertyBindingType[input.type]);
                }
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_g = _e.return)) _g.call(_e);
            }
            finally { if (e_5) throw e_5.error; }
        }
        // Generate directives input bindings
        this._visitDirectives(element.directives, implicit, elementIndex);
        // Traverse element child nodes
        if (this._inI18nSection && element.children.length == 1 &&
            element.children[0] instanceof TextAst) {
            var text = element.children[0];
            this.visitSingleI18nTextChild(text, i18nMeta);
        }
        else {
            templateVisitAll(this, element.children);
        }
        // Finish element construction mode.
        this.instruction(this._creationMode, element.endSourceSpan || element.sourceSpan, R3.elementEnd);
        // Restore the state before exiting this node
        this._inI18nSection = wasInI18nSection;
        var e_4, _c, _d, e_5, _g;
    };
    TemplateDefinitionBuilder.prototype._visitDirectives = function (directives, implicit, nodeIndex) {
        try {
            for (var directives_1 = tslib_1.__values(directives), directives_1_1 = directives_1.next(); !directives_1_1.done; directives_1_1 = directives_1.next()) {
                var directive = directives_1_1.value;
                // Creation mode
                // e.g. D(0, TodoComponentDef.n(), TodoComponentDef);
                var directiveType = directive.directive.type.reference;
                var kind = directive.directive.isComponent ? 2 /* Component */ : 1 /* Directive */;
                try {
                    // Note: *do not cache* calls to this.directiveOf() as the constant pool needs to know if the
                    // node is referenced multiple times to know that it must generate the reference into a
                    // temporary.
                    // Bindings
                    for (var _a = tslib_1.__values(directive.inputs), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var input = _b.value;
                        var convertedBinding = this.convertPropertyBinding(implicit, input.value);
                        this.instruction(this._bindingMode, directive.sourceSpan, R3.elementProperty, o.literal(nodeIndex), o.literal(input.templateName), o.importExpr(R3.bind).callFn([convertedBinding]));
                    }
                }
                catch (e_6_1) { e_6 = { error: e_6_1 }; }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_6) throw e_6.error; }
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (directives_1_1 && !directives_1_1.done && (_d = directives_1.return)) _d.call(directives_1);
            }
            finally { if (e_7) throw e_7.error; }
        }
        var e_7, _d, e_6, _c;
    };
    // TemplateAstVisitor
    TemplateDefinitionBuilder.prototype.visitEmbeddedTemplate = function (ast) {
        var _this = this;
        var templateIndex = this.allocateDataSlot();
        var templateRef = this.reflector.resolveExternalReference(Identifiers.TemplateRef);
        var templateDirective = ast.directives.find(function (directive) { return directive.directive.type.diDeps.some(function (dependency) {
            return dependency.token != null && (tokenReference(dependency.token) == templateRef);
        }); });
        var contextName = this.contextName && templateDirective && templateDirective.directive.type.reference.name ?
            this.contextName + "_" + templateDirective.directive.type.reference.name :
            null;
        var templateName = contextName ? contextName + "_Template_" + templateIndex : "Template_" + templateIndex;
        var templateContext = "ctx" + this.level;
        var parameters = [o.variable(templateName), o.literal(null, o.INFERRED_TYPE)];
        var attributeNames = [];
        ast.directives.forEach(function (directiveAst) {
            _this.addDirectiveDependency(directiveAst);
            CssSelector.parse(directiveAst.directive.selector).forEach(function (selector) {
                selector.attrs.forEach(function (value) {
                    // Convert '' (falsy) strings into `null`. This is needed because we want
                    // to communicate to runtime that these attributes are present for
                    // selector matching, but should not actually be added to the DOM.
                    // attributeNames.push(o.literal(value ? value : null));
                    // TODO(misko): make the above comment true, for now just write to DOM because
                    // the runtime selectors have not been updated.
                    attributeNames.push(o.literal(value));
                });
            });
        });
        if (attributeNames.length) {
            parameters.push(this.constantPool.getConstLiteral(o.literalArr(attributeNames), /* forcedShared */ true));
        }
        // e.g. C(1, C1Template)
        this.instruction.apply(this, tslib_1.__spread([this._creationMode, ast.sourceSpan, R3.containerCreate, o.literal(templateIndex)], trimTrailingNulls(parameters)));
        // Generate directives
        this._visitDirectives(ast.directives, o.variable(CONTEXT_NAME), templateIndex);
        // Create the template function
        var templateVisitor = new TemplateDefinitionBuilder(this.outputCtx, this.constantPool, this.reflector, templateContext, this.bindingScope, this.level + 1, this.ngContentSelectors, contextName, templateName, this.pipes, [], this.addDirectiveDependency, this.addPipeDependency);
        var templateFunctionExpr = templateVisitor.buildTemplateFunction(ast.children, ast.variables);
        this._postfix.push(templateFunctionExpr.toDeclStmt(templateName, null));
    };
    // TemplateAstVisitor
    TemplateDefinitionBuilder.prototype.visitBoundText = function (ast) {
        var nodeIndex = this.allocateDataSlot();
        // Creation mode
        this.instruction(this._creationMode, ast.sourceSpan, R3.text, o.literal(nodeIndex));
        this.instruction(this._bindingMode, ast.sourceSpan, R3.textCreateBound, o.literal(nodeIndex), this.convertPropertyBinding(o.variable(CONTEXT_NAME), ast.value));
    };
    // TemplateAstVisitor
    TemplateDefinitionBuilder.prototype.visitText = function (ast) {
        // Text is defined in creation mode only.
        this.instruction(this._creationMode, ast.sourceSpan, R3.text, o.literal(this.allocateDataSlot()), o.literal(ast.value));
    };
    // When the content of the element is a single text node the translation can be inlined:
    //
    // `<p i18n="desc|mean">some content</p>`
    // compiles to
    // ```
    // /**
    // * @desc desc
    // * @meaning mean
    // */
    // const MSG_XYZ = goog.getMsg('some content');
    // i0.ɵT(1, MSG_XYZ);
    // ```
    TemplateDefinitionBuilder.prototype.visitSingleI18nTextChild = function (text, i18nMeta) {
        var meta = parseI18nMeta(i18nMeta);
        var variable = this.constantPool.getTranslation(text.value, meta);
        this.instruction(this._creationMode, text.sourceSpan, R3.text, o.literal(this.allocateDataSlot()), variable);
    };
    TemplateDefinitionBuilder.prototype.allocateDataSlot = function () { return this._dataIndex++; };
    TemplateDefinitionBuilder.prototype.bindingContext = function () { return "" + this._bindingContext++; };
    TemplateDefinitionBuilder.prototype.instruction = function (statements, span, reference) {
        var params = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            params[_i - 3] = arguments[_i];
        }
        statements.push(o.importExpr(reference, null, span).callFn(params, span).toStmt());
    };
    TemplateDefinitionBuilder.prototype.definitionOf = function (type, kind) {
        return this.constantPool.getDefinition(type, kind, this.outputCtx);
    };
    TemplateDefinitionBuilder.prototype.temp = function () {
        if (!this._temporaryAllocated) {
            this._prefix.push(new o.DeclareVarStmt(TEMPORARY_NAME, undefined, o.DYNAMIC_TYPE));
            this._temporaryAllocated = true;
        }
        return o.variable(TEMPORARY_NAME);
    };
    TemplateDefinitionBuilder.prototype.convertPropertyBinding = function (implicit, value) {
        var pipesConvertedValue = value.visit(this._valueConverter);
        var convertedPropertyBinding = convertPropertyBinding(this, implicit, pipesConvertedValue, this.bindingContext(), BindingForm.TrySimple, interpolate);
        (_a = this._bindingMode).push.apply(_a, tslib_1.__spread(convertedPropertyBinding.stmts));
        return convertedPropertyBinding.currValExpr;
        var _a;
    };
    return TemplateDefinitionBuilder;
}());
function getQueryPredicate(query, outputCtx) {
    var predicate;
    if (query.selectors.length > 1 || (query.selectors.length == 1 && query.selectors[0].value)) {
        var selectors = query.selectors.map(function (value) { return value.value; });
        selectors.some(function (value) { return !value; }) && error('Found a type among the string selectors expected');
        predicate = outputCtx.constantPool.getConstLiteral(o.literalArr(selectors.map(function (value) { return o.literal(value); })));
    }
    else if (query.selectors.length == 1) {
        var first = query.selectors[0];
        if (first.identifier) {
            predicate = outputCtx.importExpr(first.identifier.reference);
        }
        else {
            error('Unexpected query form');
            predicate = o.literal(null);
        }
    }
    else {
        error('Unexpected query form');
        predicate = o.literal(null);
    }
    return predicate;
}
export function createFactory(type, outputCtx, reflector, queries) {
    var args = [];
    var elementRef = reflector.resolveExternalReference(Identifiers.ElementRef);
    var templateRef = reflector.resolveExternalReference(Identifiers.TemplateRef);
    var viewContainerRef = reflector.resolveExternalReference(Identifiers.ViewContainerRef);
    try {
        for (var _a = tslib_1.__values(type.diDeps), _b = _a.next(); !_b.done; _b = _a.next()) {
            var dependency = _b.value;
            if (dependency.isValue) {
                unsupported('value dependencies');
            }
            if (dependency.isHost) {
                unsupported('host dependencies');
            }
            var token = dependency.token;
            if (token) {
                var tokenRef = tokenReference(token);
                if (tokenRef === elementRef) {
                    args.push(o.importExpr(R3.injectElementRef).callFn([]));
                }
                else if (tokenRef === templateRef) {
                    args.push(o.importExpr(R3.injectTemplateRef).callFn([]));
                }
                else if (tokenRef === viewContainerRef) {
                    args.push(o.importExpr(R3.injectViewContainerRef).callFn([]));
                }
                else {
                    var value = token.identifier != null ? outputCtx.importExpr(tokenRef) : o.literal(tokenRef);
                    args.push(o.importExpr(R3.inject).callFn([value]));
                }
            }
            else {
                unsupported('dependency without a token');
            }
        }
    }
    catch (e_8_1) { e_8 = { error: e_8_1 }; }
    finally {
        try {
            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
        }
        finally { if (e_8) throw e_8.error; }
    }
    var queryDefinitions = [];
    try {
        for (var queries_1 = tslib_1.__values(queries), queries_1_1 = queries_1.next(); !queries_1_1.done; queries_1_1 = queries_1.next()) {
            var query = queries_1_1.value;
            var predicate = getQueryPredicate(query, outputCtx);
            // e.g. r3.Q(null, SomeDirective, false) or r3.Q(null, ['div'], false)
            var parameters = [
                /* memoryIndex */ o.literal(null, o.INFERRED_TYPE),
                /* predicate */ predicate,
                /* descend */ o.literal(query.descendants)
            ];
            if (query.read) {
                parameters.push(outputCtx.importExpr(query.read.identifier.reference));
            }
            queryDefinitions.push(o.importExpr(R3.query).callFn(parameters));
        }
    }
    catch (e_9_1) { e_9 = { error: e_9_1 }; }
    finally {
        try {
            if (queries_1_1 && !queries_1_1.done && (_d = queries_1.return)) _d.call(queries_1);
        }
        finally { if (e_9) throw e_9.error; }
    }
    var createInstance = new o.InstantiateExpr(outputCtx.importExpr(type.reference), args);
    var result = queryDefinitions.length > 0 ? o.literalArr(tslib_1.__spread([createInstance], queryDefinitions)) :
        createInstance;
    return o.fn([], [new o.ReturnStatement(result)], o.INFERRED_TYPE, null, type.reference.name ? type.reference.name + "_Factory" : null);
    var e_8, _c, e_9, _d;
}
/**
 *  Remove trailing null nodes as they are implied.
 */
function trimTrailingNulls(parameters) {
    while (o.isNull(parameters[parameters.length - 1])) {
        parameters.pop();
    }
    return parameters;
}
// Turn a directive selector into an R3-compatible selector for directive def
function createDirectiveSelector(selector) {
    return asLiteral(parseSelectorsToR3Selector(CssSelector.parse(selector)));
}
function createHostAttributesArray(directiveMetadata, outputCtx) {
    var values = [];
    var attributes = directiveMetadata.hostAttributes;
    try {
        for (var _a = tslib_1.__values(Object.getOwnPropertyNames(attributes)), _b = _a.next(); !_b.done; _b = _a.next()) {
            var key = _b.value;
            var value = attributes[key];
            values.push(o.literal(key), o.literal(value));
        }
    }
    catch (e_10_1) { e_10 = { error: e_10_1 }; }
    finally {
        try {
            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
        }
        finally { if (e_10) throw e_10.error; }
    }
    if (values.length > 0) {
        return outputCtx.constantPool.getConstLiteral(o.literalArr(values));
    }
    return null;
    var e_10, _c;
}
// Return a host binding function or null if one is not necessary.
function createHostBindingsFunction(directiveMetadata, outputCtx, bindingParser) {
    var statements = [];
    var temporary = function () {
        var declared = false;
        return function () {
            if (!declared) {
                statements.push(new o.DeclareVarStmt(TEMPORARY_NAME, undefined, o.DYNAMIC_TYPE));
                declared = true;
            }
            return o.variable(TEMPORARY_NAME);
        };
    }();
    var hostBindingSourceSpan = typeSourceSpan(directiveMetadata.isComponent ? 'Component' : 'Directive', directiveMetadata.type);
    // Calculate the queries
    for (var index = 0; index < directiveMetadata.queries.length; index++) {
        var query = directiveMetadata.queries[index];
        // e.g. r3.qR(tmp = r3.ld(dirIndex)[1]) && (r3.ld(dirIndex)[0].someDir = tmp);
        var getDirectiveMemory = o.importExpr(R3.load).callFn([o.variable('dirIndex')]);
        // The query list is at the query index + 1 because the directive itself is in slot 0.
        var getQueryList = getDirectiveMemory.key(o.literal(index + 1));
        var assignToTemporary = temporary().set(getQueryList);
        var callQueryRefresh = o.importExpr(R3.queryRefresh).callFn([assignToTemporary]);
        var updateDirective = getDirectiveMemory.key(o.literal(0, o.INFERRED_TYPE))
            .prop(query.propertyName)
            .set(query.first ? temporary().prop('first') : temporary());
        var andExpression = callQueryRefresh.and(updateDirective);
        statements.push(andExpression.toStmt());
    }
    var directiveSummary = directiveMetadata.toSummary();
    // Calculate the host property bindings
    var bindings = bindingParser.createBoundHostProperties(directiveSummary, hostBindingSourceSpan);
    var bindingContext = o.importExpr(R3.load).callFn([o.variable('dirIndex')]);
    if (bindings) {
        try {
            for (var bindings_1 = tslib_1.__values(bindings), bindings_1_1 = bindings_1.next(); !bindings_1_1.done; bindings_1_1 = bindings_1.next()) {
                var binding = bindings_1_1.value;
                var bindingExpr = convertPropertyBinding(null, bindingContext, binding.expression, 'b', BindingForm.TrySimple, function () { return error('Unexpected interpolation'); });
                statements.push.apply(statements, tslib_1.__spread(bindingExpr.stmts));
                statements.push(o.importExpr(R3.elementProperty)
                    .callFn([
                    o.variable('elIndex'), o.literal(binding.name),
                    o.importExpr(R3.bind).callFn([bindingExpr.currValExpr])
                ])
                    .toStmt());
            }
        }
        catch (e_11_1) { e_11 = { error: e_11_1 }; }
        finally {
            try {
                if (bindings_1_1 && !bindings_1_1.done && (_a = bindings_1.return)) _a.call(bindings_1);
            }
            finally { if (e_11) throw e_11.error; }
        }
    }
    // Calculate host event bindings
    var eventBindings = bindingParser.createDirectiveHostEventAsts(directiveSummary, hostBindingSourceSpan);
    if (eventBindings) {
        try {
            for (var eventBindings_1 = tslib_1.__values(eventBindings), eventBindings_1_1 = eventBindings_1.next(); !eventBindings_1_1.done; eventBindings_1_1 = eventBindings_1.next()) {
                var binding = eventBindings_1_1.value;
                var bindingExpr = convertActionBinding(null, bindingContext, binding.handler, 'b', function () { return error('Unexpected interpolation'); });
                var bindingName = binding.name && sanitizeIdentifier(binding.name);
                var typeName = identifierName(directiveMetadata.type);
                var functionName = typeName && bindingName ? typeName + "_" + bindingName + "_HostBindingHandler" : null;
                var handler = o.fn([new o.FnParam('$event', o.DYNAMIC_TYPE)], tslib_1.__spread(bindingExpr.stmts, [new o.ReturnStatement(bindingExpr.allowDefault)]), o.INFERRED_TYPE, null, functionName);
                statements.push(o.importExpr(R3.listener).callFn([o.literal(binding.name), handler]).toStmt());
            }
        }
        catch (e_12_1) { e_12 = { error: e_12_1 }; }
        finally {
            try {
                if (eventBindings_1_1 && !eventBindings_1_1.done && (_b = eventBindings_1.return)) _b.call(eventBindings_1);
            }
            finally { if (e_12) throw e_12.error; }
        }
    }
    if (statements.length > 0) {
        var typeName = directiveMetadata.type.reference.name;
        return o.fn([new o.FnParam('dirIndex', o.NUMBER_TYPE), new o.FnParam('elIndex', o.NUMBER_TYPE)], statements, o.INFERRED_TYPE, null, typeName ? typeName + "_HostBindings" : null);
    }
    return null;
    var e_11, _a, e_12, _b;
}
function conditionallyCreateMapObjectLiteral(keys, outputCtx) {
    if (Object.getOwnPropertyNames(keys).length > 0) {
        return mapToExpression(keys);
    }
    return null;
}
var ValueConverter = /** @class */ (function (_super) {
    tslib_1.__extends(ValueConverter, _super);
    function ValueConverter(outputCtx, allocateSlot, definePipe) {
        var _this = _super.call(this) || this;
        _this.outputCtx = outputCtx;
        _this.allocateSlot = allocateSlot;
        _this.definePipe = definePipe;
        _this.pipeSlots = new Map();
        return _this;
    }
    // AstMemoryEfficientTransformer
    ValueConverter.prototype.visitPipe = function (ast, context) {
        // Allocate a slot to create the pipe
        var slot = this.allocateSlot();
        var slotPseudoLocal = "PIPE:" + slot;
        var target = new PropertyRead(ast.span, new ImplicitReceiver(ast.span), slotPseudoLocal);
        var bindingId = pipeBinding(ast.args);
        this.definePipe(ast.name, slotPseudoLocal, slot, o.importExpr(bindingId));
        var value = ast.exp.visit(this);
        var args = this.visitAll(ast.args);
        return new FunctionCall(ast.span, target, tslib_1.__spread([new LiteralPrimitive(ast.span, slot), value], args));
    };
    ValueConverter.prototype.visitLiteralArray = function (ast, context) {
        var _this = this;
        return new BuiltinFunctionCall(ast.span, this.visitAll(ast.expressions), function (values) {
            // If the literal has calculated (non-literal) elements transform it into
            // calls to literal factories that compose the literal and will cache intermediate
            // values. Otherwise, just return an literal array that contains the values.
            var literal = o.literalArr(values);
            return values.every(function (a) { return a.isConstant(); }) ?
                _this.outputCtx.constantPool.getConstLiteral(literal, true) :
                getLiteralFactory(_this.outputCtx, literal);
        });
    };
    ValueConverter.prototype.visitLiteralMap = function (ast, context) {
        var _this = this;
        return new BuiltinFunctionCall(ast.span, this.visitAll(ast.values), function (values) {
            // If the literal has calculated (non-literal) elements  transform it into
            // calls to literal factories that compose the literal and will cache intermediate
            // values. Otherwise, just return an literal array that contains the values.
            var literal = o.literalMap(values.map(function (value, index) { return ({ key: ast.keys[index].key, value: value, quoted: ast.keys[index].quoted }); }));
            return values.every(function (a) { return a.isConstant(); }) ?
                _this.outputCtx.constantPool.getConstLiteral(literal, true) :
                getLiteralFactory(_this.outputCtx, literal);
        });
    };
    return ValueConverter;
}(AstMemoryEfficientTransformer));
function invalid(arg) {
    throw new Error("Invalid state: Visitor " + this.constructor.name + " doesn't handle " + o.constructor.name);
}
function findComponent(directives) {
    return directives.filter(function (directive) { return directive.directive.isComponent; })[0];
}
var ContentProjectionVisitor = /** @class */ (function (_super) {
    tslib_1.__extends(ContentProjectionVisitor, _super);
    function ContentProjectionVisitor(projectionMap, ngContentSelectors) {
        var _this = _super.call(this) || this;
        _this.projectionMap = projectionMap;
        _this.ngContentSelectors = ngContentSelectors;
        _this.index = 1;
        return _this;
    }
    ContentProjectionVisitor.prototype.visitNgContent = function (ast) {
        var selectorText = this.ngContentSelectors[ast.index];
        selectorText != null || error("could not find selector for index " + ast.index + " in " + ast);
        if (!selectorText || selectorText === '*') {
            this.projectionMap.set(ast, { index: 0 });
        }
        else {
            var cssSelectors = CssSelector.parse(selectorText);
            this.projectionMap.set(ast, { index: this.index++, selector: parseSelectorsToR3Selector(cssSelectors) });
        }
    };
    return ContentProjectionVisitor;
}(RecursiveTemplateAstVisitor));
function getContentProjection(asts, ngContentSelectors) {
    var projectIndexMap = new Map();
    var visitor = new ContentProjectionVisitor(projectIndexMap, ngContentSelectors);
    templateVisitAll(visitor, asts);
    return projectIndexMap;
}
function parserSelectorToSimpleSelector(selector) {
    var classes = selector.classNames && selector.classNames.length ? tslib_1.__spread([8 /* CLASS */], selector.classNames) :
        [];
    var elementName = selector.element && selector.element !== '*' ? selector.element : '';
    return tslib_1.__spread([elementName], selector.attrs, classes);
}
function parserSelectorToNegativeSelector(selector) {
    var classes = selector.classNames && selector.classNames.length ? tslib_1.__spread([8 /* CLASS */], selector.classNames) :
        [];
    if (selector.element) {
        return tslib_1.__spread([
            1 /* NOT */ | 4 /* ELEMENT */, selector.element
        ], selector.attrs, classes);
    }
    else if (selector.attrs.length) {
        return tslib_1.__spread([1 /* NOT */ | 2 /* ATTRIBUTE */], selector.attrs, classes);
    }
    else {
        return selector.classNames && selector.classNames.length ? tslib_1.__spread([1 /* NOT */ | 8 /* CLASS */], selector.classNames) :
            [];
    }
}
function parserSelectorToR3Selector(selector) {
    var positive = parserSelectorToSimpleSelector(selector);
    var negative = selector.notSelectors && selector.notSelectors.length ?
        selector.notSelectors.map(function (notSelector) { return parserSelectorToNegativeSelector(notSelector); }) :
        [];
    return positive.concat.apply(positive, tslib_1.__spread(negative));
}
function parseSelectorsToR3Selector(selectors) {
    return selectors.map(parserSelectorToR3Selector);
}
function asLiteral(value) {
    if (Array.isArray(value)) {
        return o.literalArr(value.map(asLiteral));
    }
    return o.literal(value, o.INFERRED_TYPE);
}
function mapToExpression(map, quoted) {
    if (quoted === void 0) { quoted = false; }
    return o.literalMap(Object.getOwnPropertyNames(map).map(function (key) { return ({ key: key, quoted: quoted, value: asLiteral(map[key]) }); }));
}
// Parse i18n metas like:
// - "@@id",
// - "description[@@id]",
// - "meaning|description[@@id]"
function parseI18nMeta(i18n) {
    var meaning;
    var description;
    var id;
    if (i18n) {
        // TODO(vicb): figure out how to force a message ID with closure ?
        var idIndex = i18n.indexOf(ID_SEPARATOR);
        var descIndex = i18n.indexOf(MEANING_SEPARATOR);
        var meaningAndDesc = void 0;
        _a = tslib_1.__read((idIndex > -1) ? [i18n.slice(0, idIndex), i18n.slice(idIndex + 2)] : [i18n, ''], 2), meaningAndDesc = _a[0], id = _a[1];
        _b = tslib_1.__read((descIndex > -1) ?
            [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] :
            ['', meaningAndDesc], 2), meaning = _b[0], description = _b[1];
    }
    return { description: description, id: id, meaning: meaning };
    var _a, _b;
}
var _a;
//# sourceMappingURL=data:application/json;base64,